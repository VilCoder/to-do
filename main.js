(()=>{var __webpack_modules__={790:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `* {\n  margin: 0;\n  padding: 0;\n  vertical-align: baseline;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n}\n\nhtml {\n  scroll-behavior: smooth;\n}\n\nbody {\n  min-height: 100vh;\n  scroll-behavior: smooth;\n  text-rendering: optimizeSpeed;\n  line-height: 1.5;\n}\n\nul,\nol {\n  list-style: none;\n}\n\na {\n  display: block;\n  text-decoration: none;\n  font-family: inherit;\n  font-size: inherit;\n  color: inherit;\n}\n\np a {\n  display: inline;\n}\n\nimg,\nvideo,\niframe,\npicture,\nfigure {\n  max-width: 100%;\n  display: block;\n}\n\nform,\ninput,\nselect,\ntextarea,\nbutton,\nlabel {\n  display: block;\n  font-family: inherit;\n  font-size: inherit;\n  color: inherit;\n}`, "",{"version":3,"sources":["webpack://./src/css/reset.css"],"names":[],"mappings":"AAAA;EACE,SAAS;EACT,UAAU;EACV,wBAAwB;AAC1B;;AAEA;;;EAGE,sBAAsB;EACtB,8BAA8B;EAC9B,2BAA2B;AAC7B;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,iBAAiB;EACjB,uBAAuB;EACvB,6BAA6B;EAC7B,gBAAgB;AAClB;;AAEA;;EAEE,gBAAgB;AAClB;;AAEA;EACE,cAAc;EACd,qBAAqB;EACrB,oBAAoB;EACpB,kBAAkB;EAClB,cAAc;AAChB;;AAEA;EACE,eAAe;AACjB;;AAEA;;;;;EAKE,eAAe;EACf,cAAc;AAChB;;AAEA;;;;;;EAME,cAAc;EACd,oBAAoB;EACpB,kBAAkB;EAClB,cAAc;AAChB","sourcesContent":["* {\\n  margin: 0;\\n  padding: 0;\\n  vertical-align: baseline;\\n}\\n\\n*,\\n*::before,\\n*::after {\\n  box-sizing: border-box;\\n  -webkit-box-sizing: border-box;\\n  -moz-box-sizing: border-box;\\n}\\n\\nhtml {\\n  scroll-behavior: smooth;\\n}\\n\\nbody {\\n  min-height: 100vh;\\n  scroll-behavior: smooth;\\n  text-rendering: optimizeSpeed;\\n  line-height: 1.5;\\n}\\n\\nul,\\nol {\\n  list-style: none;\\n}\\n\\na {\\n  display: block;\\n  text-decoration: none;\\n  font-family: inherit;\\n  font-size: inherit;\\n  color: inherit;\\n}\\n\\np a {\\n  display: inline;\\n}\\n\\nimg,\\nvideo,\\niframe,\\npicture,\\nfigure {\\n  max-width: 100%;\\n  display: block;\\n}\\n\\nform,\\ninput,\\nselect,\\ntextarea,\\nbutton,\\nlabel {\\n  display: block;\\n  font-family: inherit;\\n  font-size: inherit;\\n  color: inherit;\\n}"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzkwLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUM2RztBQUNqQjtBQUM1Riw4QkFBOEIsbUZBQTJCLENBQUMsNEZBQXFDO0FBQy9GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxPQUFPLG9GQUFvRixVQUFVLFVBQVUsWUFBWSxPQUFPLE9BQU8sWUFBWSxhQUFhLGFBQWEsT0FBTyxLQUFLLFlBQVksT0FBTyxLQUFLLFlBQVksYUFBYSxhQUFhLGFBQWEsT0FBTyxNQUFNLFlBQVksT0FBTyxLQUFLLFVBQVUsWUFBWSxhQUFhLGFBQWEsV0FBVyxPQUFPLEtBQUssVUFBVSxPQUFPLFNBQVMsVUFBVSxVQUFVLE9BQU8sVUFBVSxVQUFVLFlBQVksYUFBYSxXQUFXLDZCQUE2QixjQUFjLGVBQWUsNkJBQTZCLEdBQUcsOEJBQThCLDJCQUEyQixtQ0FBbUMsZ0NBQWdDLEdBQUcsVUFBVSw0QkFBNEIsR0FBRyxVQUFVLHNCQUFzQiw0QkFBNEIsa0NBQWtDLHFCQUFxQixHQUFHLGFBQWEscUJBQXFCLEdBQUcsT0FBTyxtQkFBbUIsMEJBQTBCLHlCQUF5Qix1QkFBdUIsbUJBQW1CLEdBQUcsU0FBUyxvQkFBb0IsR0FBRyw2Q0FBNkMsb0JBQW9CLG1CQUFtQixHQUFHLHVEQUF1RCxtQkFBbUIseUJBQXlCLHVCQUF1QixtQkFBbUIsR0FBRyxtQkFBbUI7QUFDanhDO0FBQ0EsaUVBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY3NzL3Jlc2V0LmNzcz9iMjQzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAqIHtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG59XG5cbiosXG4qOjpiZWZvcmUsXG4qOjphZnRlciB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgLW1vei1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xufVxuXG5odG1sIHtcbiAgc2Nyb2xsLWJlaGF2aW9yOiBzbW9vdGg7XG59XG5cbmJvZHkge1xuICBtaW4taGVpZ2h0OiAxMDB2aDtcbiAgc2Nyb2xsLWJlaGF2aW9yOiBzbW9vdGg7XG4gIHRleHQtcmVuZGVyaW5nOiBvcHRpbWl6ZVNwZWVkO1xuICBsaW5lLWhlaWdodDogMS41O1xufVxuXG51bCxcbm9sIHtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbn1cblxuYSB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xuICBmb250LXNpemU6IGluaGVyaXQ7XG4gIGNvbG9yOiBpbmhlcml0O1xufVxuXG5wIGEge1xuICBkaXNwbGF5OiBpbmxpbmU7XG59XG5cbmltZyxcbnZpZGVvLFxuaWZyYW1lLFxucGljdHVyZSxcbmZpZ3VyZSB7XG4gIG1heC13aWR0aDogMTAwJTtcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbmZvcm0sXG5pbnB1dCxcbnNlbGVjdCxcbnRleHRhcmVhLFxuYnV0dG9uLFxubGFiZWwge1xuICBkaXNwbGF5OiBibG9jaztcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XG4gIGZvbnQtc2l6ZTogaW5oZXJpdDtcbiAgY29sb3I6IGluaGVyaXQ7XG59YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL3Jlc2V0LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLFNBQVM7RUFDVCxVQUFVO0VBQ1Ysd0JBQXdCO0FBQzFCOztBQUVBOzs7RUFHRSxzQkFBc0I7RUFDdEIsOEJBQThCO0VBQzlCLDJCQUEyQjtBQUM3Qjs7QUFFQTtFQUNFLHVCQUF1QjtBQUN6Qjs7QUFFQTtFQUNFLGlCQUFpQjtFQUNqQix1QkFBdUI7RUFDdkIsNkJBQTZCO0VBQzdCLGdCQUFnQjtBQUNsQjs7QUFFQTs7RUFFRSxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxjQUFjO0VBQ2QscUJBQXFCO0VBQ3JCLG9CQUFvQjtFQUNwQixrQkFBa0I7RUFDbEIsY0FBYztBQUNoQjs7QUFFQTtFQUNFLGVBQWU7QUFDakI7O0FBRUE7Ozs7O0VBS0UsZUFBZTtFQUNmLGNBQWM7QUFDaEI7O0FBRUE7Ozs7OztFQU1FLGNBQWM7RUFDZCxvQkFBb0I7RUFDcEIsa0JBQWtCO0VBQ2xCLGNBQWM7QUFDaEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiKiB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xcbn1cXG5cXG4qLFxcbio6OmJlZm9yZSxcXG4qOjphZnRlciB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgLXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgLW1vei1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG5odG1sIHtcXG4gIHNjcm9sbC1iZWhhdmlvcjogc21vb3RoO1xcbn1cXG5cXG5ib2R5IHtcXG4gIG1pbi1oZWlnaHQ6IDEwMHZoO1xcbiAgc2Nyb2xsLWJlaGF2aW9yOiBzbW9vdGg7XFxuICB0ZXh0LXJlbmRlcmluZzogb3B0aW1pemVTcGVlZDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxufVxcblxcbnVsLFxcbm9sIHtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcblxcbmEge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICBmb250LWZhbWlseTogaW5oZXJpdDtcXG4gIGZvbnQtc2l6ZTogaW5oZXJpdDtcXG4gIGNvbG9yOiBpbmhlcml0O1xcbn1cXG5cXG5wIGEge1xcbiAgZGlzcGxheTogaW5saW5lO1xcbn1cXG5cXG5pbWcsXFxudmlkZW8sXFxuaWZyYW1lLFxcbnBpY3R1cmUsXFxuZmlndXJlIHtcXG4gIG1heC13aWR0aDogMTAwJTtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG5mb3JtLFxcbmlucHV0LFxcbnNlbGVjdCxcXG50ZXh0YXJlYSxcXG5idXR0b24sXFxubGFiZWwge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBmb250LWZhbWlseTogaW5oZXJpdDtcXG4gIGZvbnQtc2l6ZTogaW5oZXJpdDtcXG4gIGNvbG9yOiBpbmhlcml0O1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///790\n')},209:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/* ========================== TABLET MINI ========================== */\n@media (min-width: 520px) {\n    /* ====================== LAYOUT ======================*/\n    .layout__menu-toggle {\n      right: 2.5rem;\n    }\n\n    /* ====================== DIALOG ======================*/\n    #date,\n    #priority,\n    #category {\n      width: 15rem;\n    }\n\n    /* ====================== MAIN ======================*/\n    .list__info {\n      right: 10.5%;\n    }\n}\n\n/* ========================== TABLET ========================== */\n@media (min-width: 768px) {\n    /* ====================== LAYOUT ======================*/\n    .layout__menu-toggle {\n      right: 3.5rem;\n    }\n\n    /* ====================== DIALOG ======================*/\n    #date,\n    #priority,\n    #category {\n      width: fit-content;\n    }\n\n    /* ====================== MAIN ======================*/\n    .list__info {\n      right: 7%;\n    }\n}\n\n/* ========================== DESKTOP ========================== */\n@media (min-width: 1064px) {\n    /* ====================== LAYOUT ======================*/\n    .layout {\n      position: relative;\n      height: 83vh;\n      min-height: 80vh;\n      margin: 9vh auto;\n      display: grid;\n      grid-template-areas: "aside content";\n      grid-template-columns: 30% 70%;\n      border-radius: 4rem;\n      box-shadow: 0 0 100px -5px rgb(0 0 0 / 0.25);\n      overflow: hidden;\n    }\n\n    .layout__menu-toggle {\n      display: none;\n    }\n\n    /* ====================== ASIDE ======================*/\n    .layout__aside {\n      grid-area: aside;\n      position: static;\n      margin-left: 0;\n      opacity: 1;\n    }\n\n    /* ====================== MAIN ======================*/\n    .layout__main {\n      grid-area: content;\n    }\n\n    .main__sort {\n      margin-right: 0;\n    }\n\n    .list__info {\n      right: 6%;\n    }\n}`, "",{"version":3,"sources":["webpack://./src/css/responsive.css"],"names":[],"mappings":"AAAA,sEAAsE;AACtE;IACI,wDAAwD;IACxD;MACE,aAAa;IACf;;IAEA,wDAAwD;IACxD;;;MAGE,YAAY;IACd;;IAEA,sDAAsD;IACtD;MACE,YAAY;IACd;AACJ;;AAEA,iEAAiE;AACjE;IACI,wDAAwD;IACxD;MACE,aAAa;IACf;;IAEA,wDAAwD;IACxD;;;MAGE,kBAAkB;IACpB;;IAEA,sDAAsD;IACtD;MACE,SAAS;IACX;AACJ;;AAEA,kEAAkE;AAClE;IACI,wDAAwD;IACxD;MACE,kBAAkB;MAClB,YAAY;MACZ,gBAAgB;MAChB,gBAAgB;MAChB,aAAa;MACb,oCAAoC;MACpC,8BAA8B;MAC9B,mBAAmB;MACnB,4CAA4C;MAC5C,gBAAgB;IAClB;;IAEA;MACE,aAAa;IACf;;IAEA,uDAAuD;IACvD;MACE,gBAAgB;MAChB,gBAAgB;MAChB,cAAc;MACd,UAAU;IACZ;;IAEA,sDAAsD;IACtD;MACE,kBAAkB;IACpB;;IAEA;MACE,eAAe;IACjB;;IAEA;MACE,SAAS;IACX;AACJ","sourcesContent":["/* ========================== TABLET MINI ========================== */\\n@media (min-width: 520px) {\\n    /* ====================== LAYOUT ======================*/\\n    .layout__menu-toggle {\\n      right: 2.5rem;\\n    }\\n\\n    /* ====================== DIALOG ======================*/\\n    #date,\\n    #priority,\\n    #category {\\n      width: 15rem;\\n    }\\n\\n    /* ====================== MAIN ======================*/\\n    .list__info {\\n      right: 10.5%;\\n    }\\n}\\n\\n/* ========================== TABLET ========================== */\\n@media (min-width: 768px) {\\n    /* ====================== LAYOUT ======================*/\\n    .layout__menu-toggle {\\n      right: 3.5rem;\\n    }\\n\\n    /* ====================== DIALOG ======================*/\\n    #date,\\n    #priority,\\n    #category {\\n      width: fit-content;\\n    }\\n\\n    /* ====================== MAIN ======================*/\\n    .list__info {\\n      right: 7%;\\n    }\\n}\\n\\n/* ========================== DESKTOP ========================== */\\n@media (min-width: 1064px) {\\n    /* ====================== LAYOUT ======================*/\\n    .layout {\\n      position: relative;\\n      height: 83vh;\\n      min-height: 80vh;\\n      margin: 9vh auto;\\n      display: grid;\\n      grid-template-areas: \\"aside content\\";\\n      grid-template-columns: 30% 70%;\\n      border-radius: 4rem;\\n      box-shadow: 0 0 100px -5px rgb(0 0 0 / 0.25);\\n      overflow: hidden;\\n    }\\n\\n    .layout__menu-toggle {\\n      display: none;\\n    }\\n\\n    /* ====================== ASIDE ======================*/\\n    .layout__aside {\\n      grid-area: aside;\\n      position: static;\\n      margin-left: 0;\\n      opacity: 1;\\n    }\\n\\n    /* ====================== MAIN ======================*/\\n    .layout__main {\\n      grid-area: content;\\n    }\\n\\n    .main__sort {\\n      margin-right: 0;\\n    }\\n\\n    .list__info {\\n      right: 6%;\\n    }\\n}"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///209\n')},924:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/* ====================== GENERAL STYLES ======================*/\n:root {\n  --color-scrollbar: #D3D3D4;\n  --color-background-scrollbar: #EEE;\n}\n\n/* ====================== SCROLL CHROME SIDEBAR ======================*/\n.layout__main::-webkit-scrollbar {\n  width: 25px;\n  background-color: transparent;\n}\n\n.layout__main::-webkit-scrollbar-thumb {\n  border: 10px solid transparent;\n  box-shadow: none;\n  border-radius: 40px;\n}\n\n.layout__main:hover::-webkit-scrollbar-thumb {\n  box-shadow: inset 0 0 0 10px var(--color-scrollbar);\n}\n\n.layout__main:hover::-webkit-scrollbar-thumb:hover {\n  border: 8px solid transparent;\n  box-shadow: inset 0 0 0 10px var(--warning-color);\n}\n\n.layout__main::-webkit-scrollbar-track {\n  background-color: transparent;\n  margin: 40px 0;\n}\n\n`, "",{"version":3,"sources":["webpack://./src/css/scroll.css"],"names":[],"mappings":"AAAA,gEAAgE;AAChE;EACE,0BAA0B;EAC1B,kCAAkC;AACpC;;AAEA,uEAAuE;AACvE;EACE,WAAW;EACX,6BAA6B;AAC/B;;AAEA;EACE,8BAA8B;EAC9B,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA;EACE,mDAAmD;AACrD;;AAEA;EACE,6BAA6B;EAC7B,iDAAiD;AACnD;;AAEA;EACE,6BAA6B;EAC7B,cAAc;AAChB","sourcesContent":["/* ====================== GENERAL STYLES ======================*/\\n:root {\\n  --color-scrollbar: #D3D3D4;\\n  --color-background-scrollbar: #EEE;\\n}\\n\\n/* ====================== SCROLL CHROME SIDEBAR ======================*/\\n.layout__main::-webkit-scrollbar {\\n  width: 25px;\\n  background-color: transparent;\\n}\\n\\n.layout__main::-webkit-scrollbar-thumb {\\n  border: 10px solid transparent;\\n  box-shadow: none;\\n  border-radius: 40px;\\n}\\n\\n.layout__main:hover::-webkit-scrollbar-thumb {\\n  box-shadow: inset 0 0 0 10px var(--color-scrollbar);\\n}\\n\\n.layout__main:hover::-webkit-scrollbar-thumb:hover {\\n  border: 8px solid transparent;\\n  box-shadow: inset 0 0 0 10px var(--warning-color);\\n}\\n\\n.layout__main::-webkit-scrollbar-track {\\n  background-color: transparent;\\n  margin: 40px 0;\\n}\\n\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTI0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUM2RztBQUNqQjtBQUM1Riw4QkFBOEIsbUZBQTJCLENBQUMsNEZBQXFDO0FBQy9GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU8sNEZBQTRGLE1BQU0sWUFBWSxhQUFhLE9BQU8sWUFBWSxNQUFNLFVBQVUsWUFBWSxPQUFPLEtBQUssWUFBWSxhQUFhLGFBQWEsT0FBTyxLQUFLLFlBQVksT0FBTyxLQUFLLFlBQVksYUFBYSxPQUFPLEtBQUssWUFBWSxXQUFXLG9HQUFvRywrQkFBK0IsdUNBQXVDLEdBQUcsZ0hBQWdILGdCQUFnQixrQ0FBa0MsR0FBRyw0Q0FBNEMsbUNBQW1DLHFCQUFxQix3QkFBd0IsR0FBRyxrREFBa0Qsd0RBQXdELEdBQUcsd0RBQXdELGtDQUFrQyxzREFBc0QsR0FBRyw0Q0FBNEMsa0NBQWtDLG1CQUFtQixHQUFHLHVCQUF1QjtBQUMvb0M7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jc3Mvc2Nyb2xsLmNzcz84NDM5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAvKiA9PT09PT09PT09PT09PT09PT09PT09IEdFTkVSQUwgU1RZTEVTID09PT09PT09PT09PT09PT09PT09PT0qL1xuOnJvb3Qge1xuICAtLWNvbG9yLXNjcm9sbGJhcjogI0QzRDNENDtcbiAgLS1jb2xvci1iYWNrZ3JvdW5kLXNjcm9sbGJhcjogI0VFRTtcbn1cblxuLyogPT09PT09PT09PT09PT09PT09PT09PSBTQ1JPTEwgQ0hST01FIFNJREVCQVIgPT09PT09PT09PT09PT09PT09PT09PSovXG4ubGF5b3V0X19tYWluOjotd2Via2l0LXNjcm9sbGJhciB7XG4gIHdpZHRoOiAyNXB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbn1cblxuLmxheW91dF9fbWFpbjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIge1xuICBib3JkZXI6IDEwcHggc29saWQgdHJhbnNwYXJlbnQ7XG4gIGJveC1zaGFkb3c6IG5vbmU7XG4gIGJvcmRlci1yYWRpdXM6IDQwcHg7XG59XG5cbi5sYXlvdXRfX21haW46aG92ZXI6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iIHtcbiAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDAgMTBweCB2YXIoLS1jb2xvci1zY3JvbGxiYXIpO1xufVxuXG4ubGF5b3V0X19tYWluOmhvdmVyOjotd2Via2l0LXNjcm9sbGJhci10aHVtYjpob3ZlciB7XG4gIGJvcmRlcjogOHB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICBib3gtc2hhZG93OiBpbnNldCAwIDAgMCAxMHB4IHZhcigtLXdhcm5pbmctY29sb3IpO1xufVxuXG4ubGF5b3V0X19tYWluOjotd2Via2l0LXNjcm9sbGJhci10cmFjayB7XG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICBtYXJnaW46IDQwcHggMDtcbn1cblxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL3Njcm9sbC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsZ0VBQWdFO0FBQ2hFO0VBQ0UsMEJBQTBCO0VBQzFCLGtDQUFrQztBQUNwQzs7QUFFQSx1RUFBdUU7QUFDdkU7RUFDRSxXQUFXO0VBQ1gsNkJBQTZCO0FBQy9COztBQUVBO0VBQ0UsOEJBQThCO0VBQzlCLGdCQUFnQjtFQUNoQixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxtREFBbUQ7QUFDckQ7O0FBRUE7RUFDRSw2QkFBNkI7RUFDN0IsaURBQWlEO0FBQ25EOztBQUVBO0VBQ0UsNkJBQTZCO0VBQzdCLGNBQWM7QUFDaEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLyogPT09PT09PT09PT09PT09PT09PT09PSBHRU5FUkFMIFNUWUxFUyA9PT09PT09PT09PT09PT09PT09PT09Ki9cXG46cm9vdCB7XFxuICAtLWNvbG9yLXNjcm9sbGJhcjogI0QzRDNENDtcXG4gIC0tY29sb3ItYmFja2dyb3VuZC1zY3JvbGxiYXI6ICNFRUU7XFxufVxcblxcbi8qID09PT09PT09PT09PT09PT09PT09PT0gU0NST0xMIENIUk9NRSBTSURFQkFSID09PT09PT09PT09PT09PT09PT09PT0qL1xcbi5sYXlvdXRfX21haW46Oi13ZWJraXQtc2Nyb2xsYmFyIHtcXG4gIHdpZHRoOiAyNXB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxufVxcblxcbi5sYXlvdXRfX21haW46Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iIHtcXG4gIGJvcmRlcjogMTBweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJveC1zaGFkb3c6IG5vbmU7XFxuICBib3JkZXItcmFkaXVzOiA0MHB4O1xcbn1cXG5cXG4ubGF5b3V0X19tYWluOmhvdmVyOjotd2Via2l0LXNjcm9sbGJhci10aHVtYiB7XFxuICBib3gtc2hhZG93OiBpbnNldCAwIDAgMCAxMHB4IHZhcigtLWNvbG9yLXNjcm9sbGJhcik7XFxufVxcblxcbi5sYXlvdXRfX21haW46aG92ZXI6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iOmhvdmVyIHtcXG4gIGJvcmRlcjogOHB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDAgMTBweCB2YXIoLS13YXJuaW5nLWNvbG9yKTtcXG59XFxuXFxuLmxheW91dF9fbWFpbjo6LXdlYmtpdC1zY3JvbGxiYXItdHJhY2sge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBtYXJnaW46IDQwcHggMDtcXG59XFxuXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///924\n')},621:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(417);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);\n// Imports\n\n\n\nvar ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(423), __webpack_require__.b);\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/* ====================== GENERAL STYLES ======================*/\n:root {\n  --background-color: #ccc;\n  --primary-color: #fff;\n  --icon-color: #cbc9c7;\n  --danger-color: #dd4c3f;\n  --warning-color: #f5c542;\n  --info-color: #4986e5;\n  --layout-bg: #fff;\n  --aside-color: #fcfaf8;\n  --placeholder-color: #aaa;\n  --main-color: #808080;\n}\n\nhtml {\n  font-size: 62.5%; /* Equivalent to 10px */\n}\n\nbody {\n  width: 100%;\n  font-family: system-ui, Helvetica, sans-serif;\n  font-size: 1.5rem;\n  background-color: var(--background-color);\n  color: var(--color-text);\n  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_0___});\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: -20px -40px;\n  overflow: hidden;\n}\n\n.icon {\n  display: inline-block;\n  width: 2rem;\n  height: 2rem;\n}\n\nsvg {\n  color: var(--icon-color);\n}\n\n\n/* ====================== LAYOUT ======================*/\n.layout {\n  display: grid;\n  grid-template-areas: "content";\n  grid-template-columns: 100%;\n  width: 90%;\n  height: 100vh;\n  margin: auto;\n  background-color: var(--layout-bg);\n}\n\n.layout__menu-toggle {\n  position: absolute;\n  top: 0.8rem;\n  right: 5.5%;\n  width: 4.8rem;\n  height: 4.8rem;\n  font-size: 2.5rem;\n  line-height: 5rem;\n  border-radius: 3rem;\n  text-align: center;\n  cursor: pointer;\n  z-index: 999;\n  transition: all 500ms linear;\n}\n\n.menu-togle__icon {\n  display: block;\n  position: absolute;\n  top: 23%;\n  left: 23%;\n  color: #000;\n  transition: all 300ms linear;\n}\n\n.icon-tabler-dots-vertical {\n  opacity: 1;\n}\n\n.icon-tabler-x {\n  opacity: 0;\n}\n\n\n/* ====================== ASIDE ======================*/\n.layout__aside {\n  display: flex;\n  flex-direction: column;\n  gap: 3rem;\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  width: 27rem;\n  padding: 1.8rem;\n  background-color: var(--aside-color);\n  color: #7a7774;\n  overflow: auto;\n  z-index: 999;\n  transition: all 300ms linear;\n  margin-left: -100%;\n  opacity: 0;\n  overflow: hidden;\n}\n\n.layout__aside-visible {\n  margin-left: 0%;\n  opacity: 1;\n}\n\n.aside__user-info {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n}\n\n.user-info__image,\n.profile__image {\n  width: 3rem;\n  height: 3rem;\n  border-radius: 50%;\n  overflow: hidden;\n}\n\n.user-info__name {\n  font-weight: bold;\n  text-transform: capitalize;\n}\n\n.user-info__noti {\n  margin-left: auto;\n}\n\n.aside__user-options>*,\n.aside__user-projects>* {\n  display: flex;\n  align-items: center;\n  justify-content: start;\n  gap: 1rem;\n}\n\n.icon-tabler-circle-plus {\n  color: var(--danger-color);\n}\n\n.user-options__text {\n  width: 100%;\n  padding: 0.3rem 0;\n  background-color: transparent;\n  border: none;\n  text-align: start;\n  cursor: pointer;\n}\n\n.task__text {\n  color: var(--danger-color);\n}\n\n.option__active {\n  background-color: #fff0e5;\n  color: var(--danger-color);\n}\n\n.options__icon {\n  color: var(--danger-color);\n}\n\n.search__text:focus {\n  outline: none;\n}\n\n.search__text:focus::placeholder {\n  color: var(--danger-color);\n}\n\n.user-options__icon {\n  color: var(--danger-color);\n}\n\n.icon__active {\n  color: var(--danger-color);\n}\n\n.user-projects__project {\n  display: block;\n  margin-top: 1rem;\n}\n\n.project__symbol {\n  font-size: 1.8rem;\n  font-weight: 500;\n  margin-left: 0.6rem;\n  margin-right: 1.5rem;\n  color: var(--symbol-color);\n}\n\n.project__title {\n  position: relative;\n  bottom: 0.2rem;\n  display: inline-block;\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n}\n\n.project__title::after {\n  content: \'\';\n  position: absolute;\n  width: 0;\n  height: 0.2rem;\n  left: 0;\n  bottom: 0rem;\n  background-color: var(--after-bg-color);\n  transition: width 100ms linear;\n}\n\n.project__title:hover::after {\n  width: 100%;\n}\n\n\n/* ====================== DIALOG ======================*/\n.layout__dialog::backdrop {\n  background-color: rgb(0 0 0 / 0.22);\n}\n\n.layout__dialog {\n  position: absolute;\n  top: 50%;\n  left: -100%;\n  transform: translate(-50%, -50%);\n  max-width: 95%;\n  width: 60rem;\n  height: 27rem;\n  border: 1px solid var(--icon-color);\n  border-radius: 15px;\n  opacity: 0;\n  z-index: 99999;\n  transition: left 0.5s ease-in-out, opacity 0.5s ease-in-out;\n}\n\n.dialog__visible {\n  left: 50%;\n  opacity: 1;\n}\n\n.dialog__form {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n}\n\n.form__close {\n  position: absolute;\n  top: 0.7rem;\n  right: 1rem;\n  width: 2.3rem;\n  height: 2.3rem;\n  cursor: pointer;\n  fill: #222;\n  transition: 1s;\n}\n\n.form__group {\n  display: flex;\n  justify-content: space-between;\n}\n\n.form__group:first-of-type {\n  flex-grow: 1;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 1.5rem;\n  border-bottom: 1px solid var(--icon-color);\n}\n\n.form__group:last-of-type {\n  padding: 1.5rem;\n}\n\n.form__group>div {\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n}\n\n.form__input {\n  padding: 0.5rem;\n}\n\n.form__input:focus {\n  outline: 1px solid var(--background-color);\n}\n\n#title {\n  font-size: 2.5rem;\n  font-weight: bold;\n  border: 0;\n}\n\n#title::placeholder {\n  color: var(--placeholder-color);\n}\n\n#date,\n#category {\n  width: 11rem;\n}\n\n.form__span {\n  font-size: 2rem;\n}\n\n.form__button {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  padding: 0.3rem 2rem;\n  background-color: rgb(0 0 0 / 0.8);\n  border: 0;\n  cursor: pointer;\n  overflow: hidden;\n  transition: all 1s;\n  -webkit-box-reflect: below 1px linear-gradient(transparent, #0004);\n}\n\n.form__button:hover {\n  box-shadow:\n    0 0 10px var(--warning-color),\n    0 0 30px var(--warning-color),\n    0 0 60px var(--warning-color),\n    0 0 100px var(--warning-color);\n}\n\n.form__button::before {\n  content: \'\';\n  position: absolute;\n  width: 2rem;\n  height: 400%;\n  background-color: var(--warning-color);\n  transition: all 1s;\n  animation: animate 2s linear infinite;\n}\n\n.form__button:hover::before {\n  width: 120%;\n}\n\n@keyframes animate {\n  0% {\n    transform: rotate(0deg);\n  }\n\n  100% {\n    transform: rotate(360deg)\n  }\n}\n\n.form__button::after {\n  content: \'\';\n  position: absolute;\n  inset: 2px;\n  background-color: #0e1538;\n  transition: 0.5s;\n}\n\n.form__button:hover::after {\n  background-color: var(--warning-color);\n}\n\n.button__text {\n  position: relative;\n  font-weight: bold;\n  color: var(--primary-color);\n  opacity: 0.5;\n  transition: all 0.5s;\n  z-index: 1;\n}\n\n.button__text:hover {\n  opacity: 1;\n}\n\n\n/* ====================== MAIN ======================*/\n.layout__main {\n  grid-area: content;\n  padding: 2rem 2rem 0;\n  overflow: auto;\n}\n\n.layout__main>*,\n.main__todo>div {\n  margin-bottom: 2rem;\n}\n\n.todo__list {\n  position: relative;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  column-gap: 0.5rem;\n  padding-bottom: 0.5rem;\n  border-bottom: 1px solid var(--icon-color);\n}\n\n.list__checklist[type="checkbox"] {\n  display: grid;\n  place-content: center;\n  -webkit-appearance: none;\n  appearance: none;\n  width: 1.6rem;\n  height: 1.6rem;\n  border-radius: 50%;\n  border: 1px solid var(--main-color);\n}\n\n.list__checklist[type="checkbox"]::before {\n  content: \'\';\n  width: 1rem;\n  height: 1rem;\n  box-shadow: inset 10px 10px var(--main-color);\n  border-radius: 50%;\n  transform: scale(0);\n  transition: transform 120ms ease-in-out;\n}\n\n.list__checklist[type="checkbox"]:checked::before {\n  transform: scale(1);\n}\n\n.checklist__p-1[type="checkbox"] {\n  border: 1px solid var(--danger-color);\n}\n\n.checklist__p-1[type="checkbox"]::before {\n  box-shadow: inset 10px 10px var(--danger-color);\n}\n\n.checklist__p-2[type="checkbox"] {\n  border: 1px solid var(--warning-color);\n}\n\n.checklist__p-2[type="checkbox"]::before {\n  box-shadow: inset 10px 10px var(--warning-color);\n}\n\n.checklist__p-3[type="checkbox"] {\n  border: 1px solid var(--info-color);\n}\n\n.checklist__p-3[type="checkbox"]::before {\n  box-shadow: inset 10px 10px var(--info-color);\n}\n\n.list__title {\n  width: calc(100% - 2.2rem);\n}\n\n.list__date {\n  display: flex;\n  align-items: center;\n  position: relative;\n  left: 1.8rem;\n  font-size: 1.3rem;\n  margin-top: 0.3rem;\n  line-height: 1rem;\n}\n\n.list__date-icon {\n  display: inline-block;\n  width: 1.5rem;\n}\n\n.list__date-icon:last-child {\n  margin-left: 0.5rem;\n}\n\n.list__edit {\n  position: absolute;\n  top: 0.3rem;\n  right: 2.3rem;\n  width: 2rem;\n  height: 2rem;\n  background-color: transparent;\n  border: 0;\n  fill: var(--main-color);\n}\n\n.list__remove {\n  position: absolute;\n  top: 0.3rem;\n  right: 0;\n  width: 2rem;\n  height: 2rem;\n  background-color: transparent;\n  border: 0;\n  cursor: pointer;\n  fill: var(--danger-color);\n}\n\n.list__notfound {\n  font-size: 2.5rem;\n  font-weight: bold;\n}\n\n.list__info {\n  display: inline-block;\n  position: absolute;\n  top: 0.3rem;\n  right: 15%;\n  width: fit-content;\n  padding: 0 0.4rem;\n  color: var(--primary-color);\n  font-weight: bold;\n  line-height: 1.7rem;\n}\n\n.list__info-new {\n  background-color: lightgreen;\n}\n\n.list__info-expired {\n  background-color: var(--danger-color);\n}\n\n.main__sort {\n  display: flex;\n  justify-content: end;\n  gap: 1rem;\n  margin-right: 1.9rem;\n  cursor: pointer;\n}\n\n.main__sort:hover {\n  color: var(--danger-color);\n  fill: var(--danger-color)\n}`, "",{"version":3,"sources":["webpack://./src/css/styles.css"],"names":[],"mappings":"AAAA,gEAAgE;AAChE;EACE,wBAAwB;EACxB,qBAAqB;EACrB,qBAAqB;EACrB,uBAAuB;EACvB,wBAAwB;EACxB,qBAAqB;EACrB,iBAAiB;EACjB,sBAAsB;EACtB,yBAAyB;EACzB,qBAAqB;AACvB;;AAEA;EACE,gBAAgB,EAAE,uBAAuB;AAC3C;;AAEA;EACE,WAAW;EACX,6CAA6C;EAC7C,iBAAiB;EACjB,yCAAyC;EACzC,wBAAwB;EACxB,yDAA2C;EAC3C,sBAAsB;EACtB,4BAA4B;EAC5B,gCAAgC;EAChC,gBAAgB;AAClB;;AAEA;EACE,qBAAqB;EACrB,WAAW;EACX,YAAY;AACd;;AAEA;EACE,wBAAwB;AAC1B;;;AAGA,wDAAwD;AACxD;EACE,aAAa;EACb,8BAA8B;EAC9B,2BAA2B;EAC3B,UAAU;EACV,aAAa;EACb,YAAY;EACZ,kCAAkC;AACpC;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,WAAW;EACX,aAAa;EACb,cAAc;EACd,iBAAiB;EACjB,iBAAiB;EACjB,mBAAmB;EACnB,kBAAkB;EAClB,eAAe;EACf,YAAY;EACZ,4BAA4B;AAC9B;;AAEA;EACE,cAAc;EACd,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,WAAW;EACX,4BAA4B;AAC9B;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,UAAU;AACZ;;;AAGA,uDAAuD;AACvD;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,SAAS;EACT,YAAY;EACZ,eAAe;EACf,oCAAoC;EACpC,cAAc;EACd,cAAc;EACd,YAAY;EACZ,4BAA4B;EAC5B,kBAAkB;EAClB,UAAU;EACV,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,UAAU;AACZ;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,SAAS;AACX;;AAEA;;EAEE,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,gBAAgB;AAClB;;AAEA;EACE,iBAAiB;EACjB,0BAA0B;AAC5B;;AAEA;EACE,iBAAiB;AACnB;;AAEA;;EAEE,aAAa;EACb,mBAAmB;EACnB,sBAAsB;EACtB,SAAS;AACX;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,WAAW;EACX,iBAAiB;EACjB,6BAA6B;EAC7B,YAAY;EACZ,iBAAiB;EACjB,eAAe;AACjB;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,yBAAyB;EACzB,0BAA0B;AAC5B;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,cAAc;EACd,gBAAgB;AAClB;;AAEA;EACE,iBAAiB;EACjB,gBAAgB;EAChB,mBAAmB;EACnB,oBAAoB;EACpB,0BAA0B;AAC5B;;AAEA;EACE,kBAAkB;EAClB,cAAc;EACd,qBAAqB;EACrB,6BAA6B;EAC7B,YAAY;EACZ,eAAe;AACjB;;AAEA;EACE,WAAW;EACX,kBAAkB;EAClB,QAAQ;EACR,cAAc;EACd,OAAO;EACP,YAAY;EACZ,uCAAuC;EACvC,8BAA8B;AAChC;;AAEA;EACE,WAAW;AACb;;;AAGA,wDAAwD;AACxD;EACE,mCAAmC;AACrC;;AAEA;EACE,kBAAkB;EAClB,QAAQ;EACR,WAAW;EACX,gCAAgC;EAChC,cAAc;EACd,YAAY;EACZ,aAAa;EACb,mCAAmC;EACnC,mBAAmB;EACnB,UAAU;EACV,cAAc;EACd,2DAA2D;AAC7D;;AAEA;EACE,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,sBAAsB;EACtB,WAAW;EACX,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,WAAW;EACX,aAAa;EACb,cAAc;EACd,eAAe;EACf,UAAU;EACV,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,8BAA8B;AAChC;;AAEA;EACE,YAAY;EACZ,sBAAsB;EACtB,6BAA6B;EAC7B,eAAe;EACf,0CAA0C;AAC5C;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,WAAW;AACb;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,0CAA0C;AAC5C;;AAEA;EACE,iBAAiB;EACjB,iBAAiB;EACjB,SAAS;AACX;;AAEA;EACE,+BAA+B;AACjC;;AAEA;;EAEE,YAAY;AACd;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,kBAAkB;EAClB,oBAAoB;EACpB,kCAAkC;EAClC,SAAS;EACT,eAAe;EACf,gBAAgB;EAChB,kBAAkB;EAClB,kEAAkE;AACpE;;AAEA;EACE;;;;kCAIgC;AAClC;;AAEA;EACE,WAAW;EACX,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,sCAAsC;EACtC,kBAAkB;EAClB,qCAAqC;AACvC;;AAEA;EACE,WAAW;AACb;;AAEA;EACE;IACE,uBAAuB;EACzB;;EAEA;IACE;EACF;AACF;;AAEA;EACE,WAAW;EACX,kBAAkB;EAClB,UAAU;EACV,yBAAyB;EACzB,gBAAgB;AAClB;;AAEA;EACE,sCAAsC;AACxC;;AAEA;EACE,kBAAkB;EAClB,iBAAiB;EACjB,2BAA2B;EAC3B,YAAY;EACZ,oBAAoB;EACpB,UAAU;AACZ;;AAEA;EACE,UAAU;AACZ;;;AAGA,sDAAsD;AACtD;EACE,kBAAkB;EAClB,oBAAoB;EACpB,cAAc;AAChB;;AAEA;;EAEE,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,eAAe;EACf,mBAAmB;EACnB,kBAAkB;EAClB,sBAAsB;EACtB,0CAA0C;AAC5C;;AAEA;EACE,aAAa;EACb,qBAAqB;EACrB,wBAAwB;EACxB,gBAAgB;EAChB,aAAa;EACb,cAAc;EACd,kBAAkB;EAClB,mCAAmC;AACrC;;AAEA;EACE,WAAW;EACX,WAAW;EACX,YAAY;EACZ,6CAA6C;EAC7C,kBAAkB;EAClB,mBAAmB;EACnB,uCAAuC;AACzC;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,qCAAqC;AACvC;;AAEA;EACE,+CAA+C;AACjD;;AAEA;EACE,sCAAsC;AACxC;;AAEA;EACE,gDAAgD;AAClD;;AAEA;EACE,mCAAmC;AACrC;;AAEA;EACE,6CAA6C;AAC/C;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,kBAAkB;EAClB,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;EAClB,iBAAiB;AACnB;;AAEA;EACE,qBAAqB;EACrB,aAAa;AACf;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,aAAa;EACb,WAAW;EACX,YAAY;EACZ,6BAA6B;EAC7B,SAAS;EACT,uBAAuB;AACzB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,QAAQ;EACR,WAAW;EACX,YAAY;EACZ,6BAA6B;EAC7B,SAAS;EACT,eAAe;EACf,yBAAyB;AAC3B;;AAEA;EACE,iBAAiB;EACjB,iBAAiB;AACnB;;AAEA;EACE,qBAAqB;EACrB,kBAAkB;EAClB,WAAW;EACX,UAAU;EACV,kBAAkB;EAClB,iBAAiB;EACjB,2BAA2B;EAC3B,iBAAiB;EACjB,mBAAmB;AACrB;;AAEA;EACE,4BAA4B;AAC9B;;AAEA;EACE,qCAAqC;AACvC;;AAEA;EACE,aAAa;EACb,oBAAoB;EACpB,SAAS;EACT,oBAAoB;EACpB,eAAe;AACjB;;AAEA;EACE,0BAA0B;EAC1B;AACF","sourcesContent":["/* ====================== GENERAL STYLES ======================*/\\n:root {\\n  --background-color: #ccc;\\n  --primary-color: #fff;\\n  --icon-color: #cbc9c7;\\n  --danger-color: #dd4c3f;\\n  --warning-color: #f5c542;\\n  --info-color: #4986e5;\\n  --layout-bg: #fff;\\n  --aside-color: #fcfaf8;\\n  --placeholder-color: #aaa;\\n  --main-color: #808080;\\n}\\n\\nhtml {\\n  font-size: 62.5%; /* Equivalent to 10px */\\n}\\n\\nbody {\\n  width: 100%;\\n  font-family: system-ui, Helvetica, sans-serif;\\n  font-size: 1.5rem;\\n  background-color: var(--background-color);\\n  color: var(--color-text);\\n  background-image: url(\\"../image/fondo.png\\");\\n  background-size: cover;\\n  background-repeat: no-repeat;\\n  background-position: -20px -40px;\\n  overflow: hidden;\\n}\\n\\n.icon {\\n  display: inline-block;\\n  width: 2rem;\\n  height: 2rem;\\n}\\n\\nsvg {\\n  color: var(--icon-color);\\n}\\n\\n\\n/* ====================== LAYOUT ======================*/\\n.layout {\\n  display: grid;\\n  grid-template-areas: \\"content\\";\\n  grid-template-columns: 100%;\\n  width: 90%;\\n  height: 100vh;\\n  margin: auto;\\n  background-color: var(--layout-bg);\\n}\\n\\n.layout__menu-toggle {\\n  position: absolute;\\n  top: 0.8rem;\\n  right: 5.5%;\\n  width: 4.8rem;\\n  height: 4.8rem;\\n  font-size: 2.5rem;\\n  line-height: 5rem;\\n  border-radius: 3rem;\\n  text-align: center;\\n  cursor: pointer;\\n  z-index: 999;\\n  transition: all 500ms linear;\\n}\\n\\n.menu-togle__icon {\\n  display: block;\\n  position: absolute;\\n  top: 23%;\\n  left: 23%;\\n  color: #000;\\n  transition: all 300ms linear;\\n}\\n\\n.icon-tabler-dots-vertical {\\n  opacity: 1;\\n}\\n\\n.icon-tabler-x {\\n  opacity: 0;\\n}\\n\\n\\n/* ====================== ASIDE ======================*/\\n.layout__aside {\\n  display: flex;\\n  flex-direction: column;\\n  gap: 3rem;\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  bottom: 0;\\n  width: 27rem;\\n  padding: 1.8rem;\\n  background-color: var(--aside-color);\\n  color: #7a7774;\\n  overflow: auto;\\n  z-index: 999;\\n  transition: all 300ms linear;\\n  margin-left: -100%;\\n  opacity: 0;\\n  overflow: hidden;\\n}\\n\\n.layout__aside-visible {\\n  margin-left: 0%;\\n  opacity: 1;\\n}\\n\\n.aside__user-info {\\n  display: flex;\\n  align-items: center;\\n  gap: 1rem;\\n}\\n\\n.user-info__image,\\n.profile__image {\\n  width: 3rem;\\n  height: 3rem;\\n  border-radius: 50%;\\n  overflow: hidden;\\n}\\n\\n.user-info__name {\\n  font-weight: bold;\\n  text-transform: capitalize;\\n}\\n\\n.user-info__noti {\\n  margin-left: auto;\\n}\\n\\n.aside__user-options>*,\\n.aside__user-projects>* {\\n  display: flex;\\n  align-items: center;\\n  justify-content: start;\\n  gap: 1rem;\\n}\\n\\n.icon-tabler-circle-plus {\\n  color: var(--danger-color);\\n}\\n\\n.user-options__text {\\n  width: 100%;\\n  padding: 0.3rem 0;\\n  background-color: transparent;\\n  border: none;\\n  text-align: start;\\n  cursor: pointer;\\n}\\n\\n.task__text {\\n  color: var(--danger-color);\\n}\\n\\n.option__active {\\n  background-color: #fff0e5;\\n  color: var(--danger-color);\\n}\\n\\n.options__icon {\\n  color: var(--danger-color);\\n}\\n\\n.search__text:focus {\\n  outline: none;\\n}\\n\\n.search__text:focus::placeholder {\\n  color: var(--danger-color);\\n}\\n\\n.user-options__icon {\\n  color: var(--danger-color);\\n}\\n\\n.icon__active {\\n  color: var(--danger-color);\\n}\\n\\n.user-projects__project {\\n  display: block;\\n  margin-top: 1rem;\\n}\\n\\n.project__symbol {\\n  font-size: 1.8rem;\\n  font-weight: 500;\\n  margin-left: 0.6rem;\\n  margin-right: 1.5rem;\\n  color: var(--symbol-color);\\n}\\n\\n.project__title {\\n  position: relative;\\n  bottom: 0.2rem;\\n  display: inline-block;\\n  background-color: transparent;\\n  border: none;\\n  cursor: pointer;\\n}\\n\\n.project__title::after {\\n  content: \'\';\\n  position: absolute;\\n  width: 0;\\n  height: 0.2rem;\\n  left: 0;\\n  bottom: 0rem;\\n  background-color: var(--after-bg-color);\\n  transition: width 100ms linear;\\n}\\n\\n.project__title:hover::after {\\n  width: 100%;\\n}\\n\\n\\n/* ====================== DIALOG ======================*/\\n.layout__dialog::backdrop {\\n  background-color: rgb(0 0 0 / 0.22);\\n}\\n\\n.layout__dialog {\\n  position: absolute;\\n  top: 50%;\\n  left: -100%;\\n  transform: translate(-50%, -50%);\\n  max-width: 95%;\\n  width: 60rem;\\n  height: 27rem;\\n  border: 1px solid var(--icon-color);\\n  border-radius: 15px;\\n  opacity: 0;\\n  z-index: 99999;\\n  transition: left 0.5s ease-in-out, opacity 0.5s ease-in-out;\\n}\\n\\n.dialog__visible {\\n  left: 50%;\\n  opacity: 1;\\n}\\n\\n.dialog__form {\\n  position: relative;\\n  display: flex;\\n  flex-direction: column;\\n  width: 100%;\\n  height: 100%;\\n}\\n\\n.form__close {\\n  position: absolute;\\n  top: 0.7rem;\\n  right: 1rem;\\n  width: 2.3rem;\\n  height: 2.3rem;\\n  cursor: pointer;\\n  fill: #222;\\n  transition: 1s;\\n}\\n\\n.form__group {\\n  display: flex;\\n  justify-content: space-between;\\n}\\n\\n.form__group:first-of-type {\\n  flex-grow: 1;\\n  flex-direction: column;\\n  justify-content: space-around;\\n  padding: 1.5rem;\\n  border-bottom: 1px solid var(--icon-color);\\n}\\n\\n.form__group:last-of-type {\\n  padding: 1.5rem;\\n}\\n\\n.form__group>div {\\n  display: flex;\\n  justify-content: space-between;\\n  width: 100%;\\n}\\n\\n.form__input {\\n  padding: 0.5rem;\\n}\\n\\n.form__input:focus {\\n  outline: 1px solid var(--background-color);\\n}\\n\\n#title {\\n  font-size: 2.5rem;\\n  font-weight: bold;\\n  border: 0;\\n}\\n\\n#title::placeholder {\\n  color: var(--placeholder-color);\\n}\\n\\n#date,\\n#category {\\n  width: 11rem;\\n}\\n\\n.form__span {\\n  font-size: 2rem;\\n}\\n\\n.form__button {\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  position: relative;\\n  padding: 0.3rem 2rem;\\n  background-color: rgb(0 0 0 / 0.8);\\n  border: 0;\\n  cursor: pointer;\\n  overflow: hidden;\\n  transition: all 1s;\\n  -webkit-box-reflect: below 1px linear-gradient(transparent, #0004);\\n}\\n\\n.form__button:hover {\\n  box-shadow:\\n    0 0 10px var(--warning-color),\\n    0 0 30px var(--warning-color),\\n    0 0 60px var(--warning-color),\\n    0 0 100px var(--warning-color);\\n}\\n\\n.form__button::before {\\n  content: \'\';\\n  position: absolute;\\n  width: 2rem;\\n  height: 400%;\\n  background-color: var(--warning-color);\\n  transition: all 1s;\\n  animation: animate 2s linear infinite;\\n}\\n\\n.form__button:hover::before {\\n  width: 120%;\\n}\\n\\n@keyframes animate {\\n  0% {\\n    transform: rotate(0deg);\\n  }\\n\\n  100% {\\n    transform: rotate(360deg)\\n  }\\n}\\n\\n.form__button::after {\\n  content: \'\';\\n  position: absolute;\\n  inset: 2px;\\n  background-color: #0e1538;\\n  transition: 0.5s;\\n}\\n\\n.form__button:hover::after {\\n  background-color: var(--warning-color);\\n}\\n\\n.button__text {\\n  position: relative;\\n  font-weight: bold;\\n  color: var(--primary-color);\\n  opacity: 0.5;\\n  transition: all 0.5s;\\n  z-index: 1;\\n}\\n\\n.button__text:hover {\\n  opacity: 1;\\n}\\n\\n\\n/* ====================== MAIN ======================*/\\n.layout__main {\\n  grid-area: content;\\n  padding: 2rem 2rem 0;\\n  overflow: auto;\\n}\\n\\n.layout__main>*,\\n.main__todo>div {\\n  margin-bottom: 2rem;\\n}\\n\\n.todo__list {\\n  position: relative;\\n  display: flex;\\n  flex-wrap: wrap;\\n  align-items: center;\\n  column-gap: 0.5rem;\\n  padding-bottom: 0.5rem;\\n  border-bottom: 1px solid var(--icon-color);\\n}\\n\\n.list__checklist[type=\\"checkbox\\"] {\\n  display: grid;\\n  place-content: center;\\n  -webkit-appearance: none;\\n  appearance: none;\\n  width: 1.6rem;\\n  height: 1.6rem;\\n  border-radius: 50%;\\n  border: 1px solid var(--main-color);\\n}\\n\\n.list__checklist[type=\\"checkbox\\"]::before {\\n  content: \'\';\\n  width: 1rem;\\n  height: 1rem;\\n  box-shadow: inset 10px 10px var(--main-color);\\n  border-radius: 50%;\\n  transform: scale(0);\\n  transition: transform 120ms ease-in-out;\\n}\\n\\n.list__checklist[type=\\"checkbox\\"]:checked::before {\\n  transform: scale(1);\\n}\\n\\n.checklist__p-1[type=\\"checkbox\\"] {\\n  border: 1px solid var(--danger-color);\\n}\\n\\n.checklist__p-1[type=\\"checkbox\\"]::before {\\n  box-shadow: inset 10px 10px var(--danger-color);\\n}\\n\\n.checklist__p-2[type=\\"checkbox\\"] {\\n  border: 1px solid var(--warning-color);\\n}\\n\\n.checklist__p-2[type=\\"checkbox\\"]::before {\\n  box-shadow: inset 10px 10px var(--warning-color);\\n}\\n\\n.checklist__p-3[type=\\"checkbox\\"] {\\n  border: 1px solid var(--info-color);\\n}\\n\\n.checklist__p-3[type=\\"checkbox\\"]::before {\\n  box-shadow: inset 10px 10px var(--info-color);\\n}\\n\\n.list__title {\\n  width: calc(100% - 2.2rem);\\n}\\n\\n.list__date {\\n  display: flex;\\n  align-items: center;\\n  position: relative;\\n  left: 1.8rem;\\n  font-size: 1.3rem;\\n  margin-top: 0.3rem;\\n  line-height: 1rem;\\n}\\n\\n.list__date-icon {\\n  display: inline-block;\\n  width: 1.5rem;\\n}\\n\\n.list__date-icon:last-child {\\n  margin-left: 0.5rem;\\n}\\n\\n.list__edit {\\n  position: absolute;\\n  top: 0.3rem;\\n  right: 2.3rem;\\n  width: 2rem;\\n  height: 2rem;\\n  background-color: transparent;\\n  border: 0;\\n  fill: var(--main-color);\\n}\\n\\n.list__remove {\\n  position: absolute;\\n  top: 0.3rem;\\n  right: 0;\\n  width: 2rem;\\n  height: 2rem;\\n  background-color: transparent;\\n  border: 0;\\n  cursor: pointer;\\n  fill: var(--danger-color);\\n}\\n\\n.list__notfound {\\n  font-size: 2.5rem;\\n  font-weight: bold;\\n}\\n\\n.list__info {\\n  display: inline-block;\\n  position: absolute;\\n  top: 0.3rem;\\n  right: 15%;\\n  width: fit-content;\\n  padding: 0 0.4rem;\\n  color: var(--primary-color);\\n  font-weight: bold;\\n  line-height: 1.7rem;\\n}\\n\\n.list__info-new {\\n  background-color: lightgreen;\\n}\\n\\n.list__info-expired {\\n  background-color: var(--danger-color);\\n}\\n\\n.main__sort {\\n  display: flex;\\n  justify-content: end;\\n  gap: 1rem;\\n  margin-right: 1.9rem;\\n  cursor: pointer;\\n}\\n\\n.main__sort:hover {\\n  color: var(--danger-color);\\n  fill: var(--danger-color)\\n}"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///621\n')},314:module=>{"use strict";eval('\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = "";\n      var needLayer = typeof item[5] !== "undefined";\n      if (item[4]) {\n        content += "@supports (".concat(item[4], ") {");\n      }\n      if (item[2]) {\n        content += "@media ".concat(item[2], " {");\n      }\n      if (needLayer) {\n        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += "}";\n      }\n      if (item[2]) {\n        content += "}";\n      }\n      if (item[4]) {\n        content += "}";\n      }\n      return content;\n    }).join("");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === "string") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== "undefined") {\n        if (typeof item[5] === "undefined") {\n          item[5] = layer;\n        } else {\n          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = "".concat(supports);\n        } else {\n          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzE0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0EscUZBQXFGO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixpQkFBaUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHFCQUFxQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzRkFBc0YscUJBQXFCO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixpREFBaUQscUJBQXFCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzREFBc0QscUJBQXFCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzPzI0ZmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///314\n')},417:module=>{"use strict";eval('\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    options = {};\n  }\n  if (!url) {\n    return url;\n  }\n  url = String(url.__esModule ? url.default : url);\n\n  // If url is already wrapped in quotes, remove them\n  if (/^[\'"].*[\'"]$/.test(url)) {\n    url = url.slice(1, -1);\n  }\n  if (options.hash) {\n    url += options.hash;\n  }\n\n  // Should url be wrapped?\n  // See https://drafts.csswg.org/css-values-3/#urls\n  if (/["\'() \\t\\n]|(%20)/.test(url) || options.needQuotes) {\n    return "\\"".concat(url.replace(/"/g, \'\\\\"\').replace(/\\n/g, "\\\\n"), "\\"");\n  }\n  return url;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE3LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzPzFkZTUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIHVybCA9IFN0cmluZyh1cmwuX19lc01vZHVsZSA/IHVybC5kZWZhdWx0IDogdXJsKTtcblxuICAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cbiAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgfVxuICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgdXJsICs9IG9wdGlvbnMuaGFzaDtcbiAgfVxuXG4gIC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcbiAgaWYgKC9bXCInKCkgXFx0XFxuXXwoJTIwKS8udGVzdCh1cmwpIHx8IG9wdGlvbnMubmVlZFF1b3Rlcykge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKSwgXCJcXFwiXCIpO1xuICB9XG4gIHJldHVybiB1cmw7XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///417\n')},354:module=>{"use strict";eval('\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === "function") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);\n    var sourceMapping = "/*# ".concat(data, " */");\n    return [content].concat([sourceMapping]).join("\\n");\n  }\n  return [content].join("\\n");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzU0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsY0FBYztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanM/YWYxMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///354\n')},72:module=>{"use strict";eval('\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = "".concat(id, " ").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHdCQUF3QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw0QkFBNEI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw2QkFBNkI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanM/MmRiYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///72\n')},659:module=>{"use strict";eval('\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === "undefined") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error("Couldn\'t find a style target. This probably means that the value for the \'insert\' parameter is invalid.");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjU5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanM/YjIxNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///659\n')},540:module=>{"use strict";eval('\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement("style");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQwLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanM/ZGU2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///540\n')},56:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n  if (nonce) {\n    styleElement.setAttribute("nonce", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBLGNBQWMsS0FBd0MsR0FBRyxzQkFBaUIsR0FBRyxDQUFJO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanM/ZGRjZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///56\n')},825:module=>{"use strict";eval('\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = "";\n  if (obj.supports) {\n    css += "@supports (".concat(obj.supports, ") {");\n  }\n  if (obj.media) {\n    css += "@media ".concat(obj.media, " {");\n  }\n  var needLayer = typeof obj.layer !== "undefined";\n  if (needLayer) {\n    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += "}";\n  }\n  if (obj.media) {\n    css += "}";\n  }\n  if (obj.supports) {\n    css += "}";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== "undefined") {\n    css += "\\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === "undefined") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODI1LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EseURBQXlEO0FBQ3pEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanM/ZTQ3OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///825\n')},113:module=>{"use strict";eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanM/MWRkZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///113\n")},52:module=>{eval('module.exports = "<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 24 24\\"><path d=\\"M12,20A7,7 0 0,1 5,13A7,7 0 0,1 12,6A7,7 0 0,1 19,13A7,7 0 0,1 12,20M12,4A9,9 0 0,0 3,13A9,9 0 0,0 12,22A9,9 0 0,0 21,13A9,9 0 0,0 12,4M12.5,8H11V14L15.75,16.85L16.5,15.62L12.5,13.25V8M7.88,3.39L6.6,1.86L2,5.71L3.29,7.24L7.88,3.39M22,5.72L17.4,1.86L16.11,3.39L20.71,7.25L22,5.72Z\\"></path></svg>"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTIuanMiLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaWNvbnMvYWxhcm0uc3ZnPzA0NmMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjQgMjRcXFwiPjxwYXRoIGQ9XFxcIk0xMiwyMEE3LDcgMCAwLDEgNSwxM0E3LDcgMCAwLDEgMTIsNkE3LDcgMCAwLDEgMTksMTNBNyw3IDAgMCwxIDEyLDIwTTEyLDRBOSw5IDAgMCwwIDMsMTNBOSw5IDAgMCwwIDEyLDIyQTksOSAwIDAsMCAyMSwxM0E5LDkgMCAwLDAgMTIsNE0xMi41LDhIMTFWMTRMMTUuNzUsMTYuODVMMTYuNSwxNS42MkwxMi41LDEzLjI1VjhNNy44OCwzLjM5TDYuNiwxLjg2TDIsNS43MUwzLjI5LDcuMjRMNy44OCwzLjM5TTIyLDUuNzJMMTcuNCwxLjg2TDE2LjExLDMuMzlMMjAuNzEsNy4yNUwyMiw1LjcyWlxcXCI+PC9wYXRoPjwvc3ZnPlwiIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///52\n')},231:module=>{eval('module.exports = "<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 24 24\\"><path d=\\"M20,12A8,8 0 0,0 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20A8,8 0 0,0 20,12M22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2A10,10 0 0,1 22,12M15.5,8C16.3,8 17,8.7 17,9.5C17,10.3 16.3,11 15.5,11C14.7,11 14,10.3 14,9.5C14,8.7 14.7,8 15.5,8M10,9.5C10,10.3 9.3,11 8.5,11C7.7,11 7,10.3 7,9.5C7,8.7 7.7,8 8.5,8C9.3,8 10,8.7 10,9.5M12,14C13.75,14 15.29,14.72 16.19,15.81L14.77,17.23C14.32,16.5 13.25,16 12,16C10.75,16 9.68,16.5 9.23,17.23L7.81,15.81C8.71,14.72 10.25,14 12,14Z\\"></path></svg>"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMxLmpzIiwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2ljb25zL2Vtb3RpY29uLXNhZC1vdXRsaW5lLnN2Zz8zYTc1Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDI0IDI0XFxcIj48cGF0aCBkPVxcXCJNMjAsMTJBOCw4IDAgMCwwIDEyLDRBOCw4IDAgMCwwIDQsMTJBOCw4IDAgMCwwIDEyLDIwQTgsOCAwIDAsMCAyMCwxMk0yMiwxMkExMCwxMCAwIDAsMSAxMiwyMkExMCwxMCAwIDAsMSAyLDEyQTEwLDEwIDAgMCwxIDEyLDJBMTAsMTAgMCAwLDEgMjIsMTJNMTUuNSw4QzE2LjMsOCAxNyw4LjcgMTcsOS41QzE3LDEwLjMgMTYuMywxMSAxNS41LDExQzE0LjcsMTEgMTQsMTAuMyAxNCw5LjVDMTQsOC43IDE0LjcsOCAxNS41LDhNMTAsOS41QzEwLDEwLjMgOS4zLDExIDguNSwxMUM3LjcsMTEgNywxMC4zIDcsOS41QzcsOC43IDcuNyw4IDguNSw4QzkuMyw4IDEwLDguNyAxMCw5LjVNMTIsMTRDMTMuNzUsMTQgMTUuMjksMTQuNzIgMTYuMTksMTUuODFMMTQuNzcsMTcuMjNDMTQuMzIsMTYuNSAxMy4yNSwxNiAxMiwxNkMxMC43NSwxNiA5LjY4LDE2LjUgOS4yMywxNy4yM0w3LjgxLDE1LjgxQzguNzEsMTQuNzIgMTAuMjUsMTQgMTIsMTRaXFxcIj48L3BhdGg+PC9zdmc+XCIiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///231\n')},5:module=>{eval('module.exports = "<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 24 24\\"><path d=\\"M18 21L14 17H17V7H14L18 3L22 7H19V17H22M2 19V17H12V19M2 13V11H9V13M2 7V5H6V7H2Z\\"></path></svg>"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9pY29ucy9zb3J0LnN2Zz8yMzY0Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDI0IDI0XFxcIj48cGF0aCBkPVxcXCJNMTggMjFMMTQgMTdIMTdWN0gxNEwxOCAzTDIyIDdIMTlWMTdIMjJNMiAxOVYxN0gxMlYxOU0yIDEzVjExSDlWMTNNMiA3VjVINlY3SDJaXFxcIj48L3BhdGg+PC9zdmc+XCIiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n')},372:module=>{eval('module.exports = "<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 24 24\\"><path d=\\"M5,3C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V12H19V19H5V5H12V3H5M17.78,4C17.61,4 17.43,4.07 17.3,4.2L16.08,5.41L18.58,7.91L19.8,6.7C20.06,6.44 20.06,6 19.8,5.75L18.25,4.2C18.12,4.07 17.95,4 17.78,4M15.37,6.12L8,13.5V16H10.5L17.87,8.62L15.37,6.12Z\\"></path></svg>"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcyLmpzIiwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2ljb25zL3NxdWFyZS1lZGl0LW91dGxpbmUuc3ZnPzJiZGYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjQgMjRcXFwiPjxwYXRoIGQ9XFxcIk01LDNDMy44OSwzIDMsMy44OSAzLDVWMTlBMiwyIDAgMCwwIDUsMjFIMTlBMiwyIDAgMCwwIDIxLDE5VjEySDE5VjE5SDVWNUgxMlYzSDVNMTcuNzgsNEMxNy42MSw0IDE3LjQzLDQuMDcgMTcuMyw0LjJMMTYuMDgsNS40MUwxOC41OCw3LjkxTDE5LjgsNi43QzIwLjA2LDYuNDQgMjAuMDYsNiAxOS44LDUuNzVMMTguMjUsNC4yQzE4LjEyLDQuMDcgMTcuOTUsNCAxNy43OCw0TTE1LjM3LDYuMTJMOCwxMy41VjE2SDEwLjVMMTcuODcsOC42MkwxNS4zNyw2LjEyWlxcXCI+PC9wYXRoPjwvc3ZnPlwiIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///372\n')},321:module=>{eval('module.exports = "<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 24 24\\"><path d=\\"M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z\\"></path></svg>"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzIxLmpzIiwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2ljb25zL3RyYXNoLnN2Zz84YmFjIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDI0IDI0XFxcIj48cGF0aCBkPVxcXCJNOSwzVjRINFY2SDVWMTlBMiwyIDAgMCwwIDcsMjFIMTdBMiwyIDAgMCwwIDE5LDE5VjZIMjBWNEgxNVYzSDlNNyw2SDE3VjE5SDdWNk05LDhWMTdIMTFWOEg5TTEzLDhWMTdIMTVWOEgxM1pcXFwiPjwvcGF0aD48L3N2Zz5cIiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///321\n')},602:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval('\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\nvar injectStylesIntoStyleTag = __webpack_require__(72);\nvar injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js\nvar styleDomAPI = __webpack_require__(825);\nvar styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js\nvar insertBySelector = __webpack_require__(659);\nvar insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\nvar setAttributesWithoutAttributes = __webpack_require__(56);\nvar setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js\nvar insertStyleElement = __webpack_require__(540);\nvar insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js\nvar styleTagTransform = __webpack_require__(113);\nvar styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/css/reset.css\nvar css_reset = __webpack_require__(790);\n;// ./src/css/reset.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (styleTagTransform_default());\noptions.setAttributes = (setAttributesWithoutAttributes_default());\noptions.insert = insertBySelector_default().bind(null, "head");\noptions.domAPI = (styleDomAPI_default());\noptions.insertStyleElement = (insertStyleElement_default());\n\nvar update = injectStylesIntoStyleTag_default()(css_reset/* default */.A, options);\n\n\n\n\n       /* harmony default export */ const src_css_reset = (css_reset/* default */.A && css_reset/* default */.A.locals ? css_reset/* default */.A.locals : undefined);\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/css/scroll.css\nvar css_scroll = __webpack_require__(924);\n;// ./src/css/scroll.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar scroll_options = {};\n\nscroll_options.styleTagTransform = (styleTagTransform_default());\nscroll_options.setAttributes = (setAttributesWithoutAttributes_default());\nscroll_options.insert = insertBySelector_default().bind(null, "head");\nscroll_options.domAPI = (styleDomAPI_default());\nscroll_options.insertStyleElement = (insertStyleElement_default());\n\nvar scroll_update = injectStylesIntoStyleTag_default()(css_scroll/* default */.A, scroll_options);\n\n\n\n\n       /* harmony default export */ const src_css_scroll = (css_scroll/* default */.A && css_scroll/* default */.A.locals ? css_scroll/* default */.A.locals : undefined);\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/css/styles.css\nvar styles = __webpack_require__(621);\n;// ./src/css/styles.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar styles_options = {};\n\nstyles_options.styleTagTransform = (styleTagTransform_default());\nstyles_options.setAttributes = (setAttributesWithoutAttributes_default());\nstyles_options.insert = insertBySelector_default().bind(null, "head");\nstyles_options.domAPI = (styleDomAPI_default());\nstyles_options.insertStyleElement = (insertStyleElement_default());\n\nvar styles_update = injectStylesIntoStyleTag_default()(styles/* default */.A, styles_options);\n\n\n\n\n       /* harmony default export */ const css_styles = (styles/* default */.A && styles/* default */.A.locals ? styles/* default */.A.locals : undefined);\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/css/responsive.css\nvar responsive = __webpack_require__(209);\n;// ./src/css/responsive.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar responsive_options = {};\n\nresponsive_options.styleTagTransform = (styleTagTransform_default());\nresponsive_options.setAttributes = (setAttributesWithoutAttributes_default());\nresponsive_options.insert = insertBySelector_default().bind(null, "head");\nresponsive_options.domAPI = (styleDomAPI_default());\nresponsive_options.insertStyleElement = (insertStyleElement_default());\n\nvar responsive_update = injectStylesIntoStyleTag_default()(responsive/* default */.A, responsive_options);\n\n\n\n\n       /* harmony default export */ const css_responsive = (responsive/* default */.A && responsive/* default */.A.locals ? responsive/* default */.A.locals : undefined);\n\n// EXTERNAL MODULE: ./src/icons/square-edit-outline.svg\nvar square_edit_outline = __webpack_require__(372);\nvar square_edit_outline_default = /*#__PURE__*/__webpack_require__.n(square_edit_outline);\n// EXTERNAL MODULE: ./src/icons/trash.svg\nvar trash = __webpack_require__(321);\nvar trash_default = /*#__PURE__*/__webpack_require__.n(trash);\n// EXTERNAL MODULE: ./src/icons/alarm.svg\nvar alarm = __webpack_require__(52);\nvar alarm_default = /*#__PURE__*/__webpack_require__.n(alarm);\n;// ./node_modules/date-fns/locale/en-US/_lib/formatDistance.js\nconst formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: "less than a second",\n    other: "less than {{count}} seconds",\n  },\n\n  xSeconds: {\n    one: "1 second",\n    other: "{{count}} seconds",\n  },\n\n  halfAMinute: "half a minute",\n\n  lessThanXMinutes: {\n    one: "less than a minute",\n    other: "less than {{count}} minutes",\n  },\n\n  xMinutes: {\n    one: "1 minute",\n    other: "{{count}} minutes",\n  },\n\n  aboutXHours: {\n    one: "about 1 hour",\n    other: "about {{count}} hours",\n  },\n\n  xHours: {\n    one: "1 hour",\n    other: "{{count}} hours",\n  },\n\n  xDays: {\n    one: "1 day",\n    other: "{{count}} days",\n  },\n\n  aboutXWeeks: {\n    one: "about 1 week",\n    other: "about {{count}} weeks",\n  },\n\n  xWeeks: {\n    one: "1 week",\n    other: "{{count}} weeks",\n  },\n\n  aboutXMonths: {\n    one: "about 1 month",\n    other: "about {{count}} months",\n  },\n\n  xMonths: {\n    one: "1 month",\n    other: "{{count}} months",\n  },\n\n  aboutXYears: {\n    one: "about 1 year",\n    other: "about {{count}} years",\n  },\n\n  xYears: {\n    one: "1 year",\n    other: "{{count}} years",\n  },\n\n  overXYears: {\n    one: "over 1 year",\n    other: "over {{count}} years",\n  },\n\n  almostXYears: {\n    one: "almost 1 year",\n    other: "almost {{count}} years",\n  },\n};\n\nconst formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === "string") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace("{{count}}", count.toString());\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return "in " + result;\n    } else {\n      return result + " ago";\n    }\n  }\n\n  return result;\n};\n\n;// ./node_modules/date-fns/locale/_lib/buildFormatLongFn.js\nfunction buildFormatLongFn(args) {\n  return (options = {}) => {\n    // TODO: Remove String()\n    const width = options.width ? String(options.width) : args.defaultWidth;\n    const format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n\n;// ./node_modules/date-fns/locale/en-US/_lib/formatLong.js\n\n\nconst dateFormats = {\n  full: "EEEE, MMMM do, y",\n  long: "MMMM do, y",\n  medium: "MMM d, y",\n  short: "MM/dd/yyyy",\n};\n\nconst timeFormats = {\n  full: "h:mm:ss a zzzz",\n  long: "h:mm:ss a z",\n  medium: "h:mm:ss a",\n  short: "h:mm a",\n};\n\nconst dateTimeFormats = {\n  full: "{{date}} \'at\' {{time}}",\n  long: "{{date}} \'at\' {{time}}",\n  medium: "{{date}}, {{time}}",\n  short: "{{date}}, {{time}}",\n};\n\nconst formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: "full",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: "full",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: "full",\n  }),\n};\n\n;// ./node_modules/date-fns/locale/en-US/_lib/formatRelative.js\nconst formatRelativeLocale = {\n  lastWeek: "\'last\' eeee \'at\' p",\n  yesterday: "\'yesterday at\' p",\n  today: "\'today at\' p",\n  tomorrow: "\'tomorrow at\' p",\n  nextWeek: "eeee \'at\' p",\n  other: "P",\n};\n\nconst formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n\n;// ./node_modules/date-fns/locale/_lib/buildLocalizeFn.js\n/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */\n\n/**\n * The map of localized values for each width.\n */\n\n/**\n * The index type of the locale unit value. It types conversion of units of\n * values that don\'t start at 0 (i.e. quarters).\n */\n\n/**\n * Converts the unit value to the tuple of values.\n */\n\n/**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */\n\n/**\n * The tuple of localized quarter values. The first element represents Q1.\n */\n\n/**\n * The tuple of localized day values. The first element represents Sunday.\n */\n\n/**\n * The tuple of localized month values. The first element represents January.\n */\n\nfunction buildLocalizeFn(args) {\n  return (value, options) => {\n    const context = options?.context ? String(options.context) : "standalone";\n\n    let valuesArray;\n    if (context === "formatting" && args.formattingValues) {\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      const width = options?.width ? String(options.width) : defaultWidth;\n\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      const defaultWidth = args.defaultWidth;\n      const width = options?.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[width] || args.values[defaultWidth];\n    }\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\n\n    // @ts-expect-error - For some reason TypeScript just don\'t want to match it, no matter how hard we try. I challenge you to try to remove it!\n    return valuesArray[index];\n  };\n}\n\n;// ./node_modules/date-fns/locale/en-US/_lib/localize.js\n\n\nconst eraValues = {\n  narrow: ["B", "A"],\n  abbreviated: ["BC", "AD"],\n  wide: ["Before Christ", "Anno Domini"],\n};\n\nconst quarterValues = {\n  narrow: ["1", "2", "3", "4"],\n  abbreviated: ["Q1", "Q2", "Q3", "Q4"],\n  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"],\n};\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you\'re working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],\n  abbreviated: [\n    "Jan",\n    "Feb",\n    "Mar",\n    "Apr",\n    "May",\n    "Jun",\n    "Jul",\n    "Aug",\n    "Sep",\n    "Oct",\n    "Nov",\n    "Dec",\n  ],\n\n  wide: [\n    "January",\n    "February",\n    "March",\n    "April",\n    "May",\n    "June",\n    "July",\n    "August",\n    "September",\n    "October",\n    "November",\n    "December",\n  ],\n};\n\nconst dayValues = {\n  narrow: ["S", "M", "T", "W", "T", "F", "S"],\n  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],\n  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],\n  wide: [\n    "Sunday",\n    "Monday",\n    "Tuesday",\n    "Wednesday",\n    "Thursday",\n    "Friday",\n    "Saturday",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: "a",\n    pm: "p",\n    midnight: "mi",\n    noon: "n",\n    morning: "morning",\n    afternoon: "afternoon",\n    evening: "evening",\n    night: "night",\n  },\n  abbreviated: {\n    am: "AM",\n    pm: "PM",\n    midnight: "midnight",\n    noon: "noon",\n    morning: "morning",\n    afternoon: "afternoon",\n    evening: "evening",\n    night: "night",\n  },\n  wide: {\n    am: "a.m.",\n    pm: "p.m.",\n    midnight: "midnight",\n    noon: "noon",\n    morning: "morning",\n    afternoon: "afternoon",\n    evening: "evening",\n    night: "night",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: "a",\n    pm: "p",\n    midnight: "mi",\n    noon: "n",\n    morning: "in the morning",\n    afternoon: "in the afternoon",\n    evening: "in the evening",\n    night: "at night",\n  },\n  abbreviated: {\n    am: "AM",\n    pm: "PM",\n    midnight: "midnight",\n    noon: "noon",\n    morning: "in the morning",\n    afternoon: "in the afternoon",\n    evening: "in the evening",\n    night: "at night",\n  },\n  wide: {\n    am: "a.m.",\n    pm: "p.m.",\n    midnight: "midnight",\n    noon: "noon",\n    morning: "in the morning",\n    afternoon: "in the afternoon",\n    evening: "in the evening",\n    night: "at night",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be \'year\', \'quarter\', \'month\', \'week\', \'date\', \'dayOfYear\',\n  // \'day\', \'hour\', \'minute\', \'second\'.\n\n  const rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + "st";\n      case 2:\n        return number + "nd";\n      case 3:\n        return number + "rd";\n    }\n  }\n  return number + "th";\n};\n\nconst localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: "wide",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: "wide",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: "wide",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: "wide",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: "wide",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: "wide",\n  }),\n};\n\n;// ./node_modules/date-fns/locale/_lib/buildMatchFn.js\nfunction buildMatchFn(args) {\n  return (string, options = {}) => {\n    const width = options.width;\n\n    const matchPattern =\n      (width && args.matchPatterns[width]) ||\n      args.matchPatterns[args.defaultMatchWidth];\n    const matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n    const matchedString = matchResult[0];\n\n    const parsePatterns =\n      (width && args.parsePatterns[width]) ||\n      args.parsePatterns[args.defaultParseWidth];\n\n    const key = Array.isArray(parsePatterns)\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\n      : // [TODO] -- I challenge you to fix the type\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\n\n    let value;\n\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback\n      ? // [TODO] -- I challenge you to fix the type\n        options.valueCallback(value)\n      : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (const key in object) {\n    if (\n      Object.prototype.hasOwnProperty.call(object, key) &&\n      predicate(object[key])\n    ) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (let key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\n;// ./node_modules/date-fns/locale/_lib/buildMatchPatternFn.js\nfunction buildMatchPatternFn(args) {\n  return (string, options = {}) => {\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback\n      ? args.valueCallback(parseResult[0])\n      : parseResult[0];\n\n    // [TODO] I challenge you to fix the type\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\n;// ./node_modules/date-fns/locale/en-US/_lib/match.js\n\n\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i,\n};\nconst parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^j/i,\n    /^f/i,\n    /^m/i,\n    /^a/i,\n    /^m/i,\n    /^j/i,\n    /^j/i,\n    /^a/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^may/i,\n    /^jun/i,\n    /^jul/i,\n    /^au/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nconst match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: "wide",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: "any",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: "wide",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: "any",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: "wide",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: "any",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: "wide",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: "any",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: "any",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: "any",\n  }),\n};\n\n;// ./node_modules/date-fns/locale/en-US.js\n\n\n\n\n\n\n/**\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */\nconst enUS = {\n  code: "en-US",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\n/* harmony default export */ const en_US = ((/* unused pure expression or super */ null && (enUS)));\n\n;// ./node_modules/date-fns/_lib/format/longFormatters.js\nconst dateLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case "P":\n      return formatLong.date({ width: "short" });\n    case "PP":\n      return formatLong.date({ width: "medium" });\n    case "PPP":\n      return formatLong.date({ width: "long" });\n    case "PPPP":\n    default:\n      return formatLong.date({ width: "full" });\n  }\n};\n\nconst timeLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case "p":\n      return formatLong.time({ width: "short" });\n    case "pp":\n      return formatLong.time({ width: "medium" });\n    case "ppp":\n      return formatLong.time({ width: "long" });\n    case "pppp":\n    default:\n      return formatLong.time({ width: "full" });\n  }\n};\n\nconst dateTimeLongFormatter = (pattern, formatLong) => {\n  const matchResult = pattern.match(/(P+)(p+)?/) || [];\n  const datePattern = matchResult[1];\n  const timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  let dateTimeFormat;\n\n  switch (datePattern) {\n    case "P":\n      dateTimeFormat = formatLong.dateTime({ width: "short" });\n      break;\n    case "PP":\n      dateTimeFormat = formatLong.dateTime({ width: "medium" });\n      break;\n    case "PPP":\n      dateTimeFormat = formatLong.dateTime({ width: "long" });\n      break;\n    case "PPPP":\n    default:\n      dateTimeFormat = formatLong.dateTime({ width: "full" });\n      break;\n  }\n\n  return dateTimeFormat\n    .replace("{{date}}", dateLongFormatter(datePattern, formatLong))\n    .replace("{{time}}", timeLongFormatter(timePattern, formatLong));\n};\n\nconst longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter,\n};\n\n;// ./node_modules/date-fns/_lib/protectedTokens.js\nconst dayOfYearTokenRE = /^D+$/;\nconst weekYearTokenRE = /^Y+$/;\n\nconst throwTokens = ["D", "DD", "YY", "YYYY"];\n\nfunction isProtectedDayOfYearToken(token) {\n  return dayOfYearTokenRE.test(token);\n}\n\nfunction isProtectedWeekYearToken(token) {\n  return weekYearTokenRE.test(token);\n}\n\nfunction warnOrThrowProtectedError(token, format, input) {\n  const _message = message(token, format, input);\n  console.warn(_message);\n  if (throwTokens.includes(token)) throw new RangeError(_message);\n}\n\nfunction message(token, format, input) {\n  const subject = token[0] === "Y" ? "years" : "days of the month";\n  return `Use \\`${token.toLowerCase()}\\` instead of \\`${token}\\` (in \\`${format}\\`) for formatting ${subject} to the input \\`${input}\\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;\n}\n\n;// ./node_modules/date-fns/constants.js\n/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from "./constants/date-fns/constants";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nconst daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nconst daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from "./constants/date-fns/constants";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nconst maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from "./constants/date-fns/constants";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nconst minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nconst millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nconst millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nconst millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nconst millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nconst millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nconst minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nconst minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nconst minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nconst minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nconst monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nconst monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nconst quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nconst secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nconst secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nconst secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nconst secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nconst secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nconst secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nconst secondsInQuarter = secondsInMonth * 3;\n\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It\'s useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\nconst constructFromSymbol = Symbol.for("constructDateFrom");\n\n;// ./node_modules/date-fns/constructFrom.js\n\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for("constructDateFrom")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It\'s useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from "./constructFrom/date-fns";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nfunction constructFrom(date, value) {\n  if (typeof date === "function") return date(value);\n\n  if (date && typeof date === "object" && constructFromSymbol in date)\n    return date[constructFromSymbol](value);\n\n  if (date instanceof Date) return new date.constructor(value);\n\n  return new Date(value);\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_constructFrom = ((/* unused pure expression or super */ null && (constructFrom)));\n\n;// ./node_modules/date-fns/_lib/defaultOptions.js\nlet defaultOptions = {};\n\nfunction getDefaultOptions() {\n  return defaultOptions;\n}\n\nfunction setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n\n;// ./node_modules/date-fns/getDefaultOptions.js\n\n\n/**\n * @name getDefaultOptions\n * @category Common Helpers\n * @summary Get default options.\n * @pure false\n *\n * @description\n * Returns an object that contains defaults for\n * `options.locale`, `options.weekStartsOn` and `options.firstWeekContainsDate`\n * arguments for all functions.\n *\n * You can change these with [setDefaultOptions](https://date-fns.org/docs/setDefaultOptions).\n *\n * @returns The default options\n *\n * @example\n * const result = getDefaultOptions()\n * //=> {}\n *\n * @example\n * setDefaultOptions({ weekStarsOn: 1, firstWeekContainsDate: 4 })\n * const result = getDefaultOptions()\n * //=> { weekStarsOn: 1, firstWeekContainsDate: 4 }\n */\nfunction getDefaultOptions_getDefaultOptions() {\n  return Object.assign({}, getDefaultOptions());\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_getDefaultOptions = ((/* unused pure expression or super */ null && (getDefaultOptions_getDefaultOptions)));\n\n;// ./node_modules/date-fns/toDate.js\n\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for("constructDateFrom")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It\'s useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nfunction toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return constructFrom(context || argument, argument);\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_toDate = ((/* unused pure expression or super */ null && (toDate)));\n\n;// ./node_modules/date-fns/transpose.js\n\n\n/**\n * @name transpose\n * @category Generic Helpers\n * @summary Transpose the date to the given constructor.\n *\n * @description\n * The function transposes the date to the given constructor. It helps you\n * to transpose the date in the system time zone to say `UTCDate` or any other\n * date extension.\n *\n * @typeParam InputDate - The input `Date` type derived from the passed argument.\n * @typeParam ResultDate - The result `Date` type derived from the passed constructor.\n *\n * @param date - The date to use values from\n * @param constructor - The date constructor to use\n *\n * @returns Date transposed to the given constructor\n *\n * @example\n * // Create July 10, 2022 00:00 in locale time zone\n * const date = new Date(2022, 6, 10)\n * //=> \'Sun Jul 10 2022 00:00:00 GMT+0800 (Singapore Standard Time)\'\n *\n * @example\n * // Transpose the date to July 10, 2022 00:00 in UTC\n * transpose(date, UTCDate)\n * //=> \'Sun Jul 10 2022 00:00:00 GMT+0000 (Coordinated Universal Time)\'\n */\nfunction transpose(date, constructor) {\n  const date_ = isConstructor(constructor)\n    ? new constructor(0)\n    : constructFrom(constructor, 0);\n  date_.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n  date_.setHours(\n    date.getHours(),\n    date.getMinutes(),\n    date.getSeconds(),\n    date.getMilliseconds(),\n  );\n  return date_;\n}\n\nfunction isConstructor(constructor) {\n  return (\n    typeof constructor === "function" &&\n    constructor.prototype?.constructor === constructor\n  );\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_transpose = ((/* unused pure expression or super */ null && (transpose)));\n\n;// ./node_modules/date-fns/parse/_lib/Setter.js\n\n\n\nconst TIMEZONE_UNIT_PRIORITY = 10;\n\nclass Setter {\n  subPriority = 0;\n\n  validate(_utcDate, _options) {\n    return true;\n  }\n}\n\nclass ValueSetter extends Setter {\n  constructor(\n    value,\n\n    validateValue,\n\n    setValue,\n\n    priority,\n    subPriority,\n  ) {\n    super();\n    this.value = value;\n    this.validateValue = validateValue;\n    this.setValue = setValue;\n    this.priority = priority;\n    if (subPriority) {\n      this.subPriority = subPriority;\n    }\n  }\n\n  validate(date, options) {\n    return this.validateValue(date, this.value, options);\n  }\n\n  set(date, flags, options) {\n    return this.setValue(date, flags, this.value, options);\n  }\n}\n\nclass DateTimezoneSetter extends Setter {\n  priority = TIMEZONE_UNIT_PRIORITY;\n  subPriority = -1;\n\n  constructor(context, reference) {\n    super();\n    this.context = context || ((date) => constructFrom(reference, date));\n  }\n\n  set(date, flags) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(date, transpose(date, this.context));\n  }\n}\n\n;// ./node_modules/date-fns/parse/_lib/Parser.js\n\n\nclass Parser {\n  run(dateString, token, match, options) {\n    const result = this.parse(dateString, token, match, options);\n    if (!result) {\n      return null;\n    }\n\n    return {\n      setter: new ValueSetter(\n        result.value,\n        this.validate,\n        this.set,\n        this.priority,\n        this.subPriority,\n      ),\n      rest: result.rest,\n    };\n  }\n\n  validate(_utcDate, _value, _options) {\n    return true;\n  }\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/EraParser.js\n\n\nclass EraParser extends Parser {\n  priority = 140;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // AD, BC\n      case "G":\n      case "GG":\n      case "GGG":\n        return (\n          match.era(dateString, { width: "abbreviated" }) ||\n          match.era(dateString, { width: "narrow" })\n        );\n\n      // A, B\n      case "GGGGG":\n        return match.era(dateString, { width: "narrow" });\n      // Anno Domini, Before Christ\n      case "GGGG":\n      default:\n        return (\n          match.era(dateString, { width: "wide" }) ||\n          match.era(dateString, { width: "abbreviated" }) ||\n          match.era(dateString, { width: "narrow" })\n        );\n    }\n  }\n\n  set(date, flags, value) {\n    flags.era = value;\n    date.setFullYear(value, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = ["R", "u", "t", "T"];\n}\n\n;// ./node_modules/date-fns/parse/_lib/constants.js\nconst numericPatterns = {\n  month: /^(1[0-2]|0?\\d)/, // 0 to 12\n  date: /^(3[0-1]|[0-2]?\\d)/, // 0 to 31\n  dayOfYear: /^(36[0-6]|3[0-5]\\d|[0-2]?\\d?\\d)/, // 0 to 366\n  week: /^(5[0-3]|[0-4]?\\d)/, // 0 to 53\n  hour23h: /^(2[0-3]|[0-1]?\\d)/, // 0 to 23\n  hour24h: /^(2[0-4]|[0-1]?\\d)/, // 0 to 24\n  hour11h: /^(1[0-1]|0?\\d)/, // 0 to 11\n  hour12h: /^(1[0-2]|0?\\d)/, // 0 to 12\n  minute: /^[0-5]?\\d/, // 0 to 59\n  second: /^[0-5]?\\d/, // 0 to 59\n\n  singleDigit: /^\\d/, // 0 to 9\n  twoDigits: /^\\d{1,2}/, // 0 to 99\n  threeDigits: /^\\d{1,3}/, // 0 to 999\n  fourDigits: /^\\d{1,4}/, // 0 to 9999\n\n  anyDigitsSigned: /^-?\\d+/,\n  singleDigitSigned: /^-?\\d/, // 0 to 9, -0 to -9\n  twoDigitsSigned: /^-?\\d{1,2}/, // 0 to 99, -0 to -99\n  threeDigitsSigned: /^-?\\d{1,3}/, // 0 to 999, -0 to -999\n  fourDigitsSigned: /^-?\\d{1,4}/, // 0 to 9999, -0 to -9999\n};\n\nconst timezonePatterns = {\n  basicOptionalMinutes: /^([+-])(\\d{2})(\\d{2})?|Z/,\n  basic: /^([+-])(\\d{2})(\\d{2})|Z/,\n  basicOptionalSeconds: /^([+-])(\\d{2})(\\d{2})((\\d{2}))?|Z/,\n  extended: /^([+-])(\\d{2}):(\\d{2})|Z/,\n  extendedOptionalSeconds: /^([+-])(\\d{2}):(\\d{2})(:(\\d{2}))?|Z/,\n};\n\n;// ./node_modules/date-fns/parse/_lib/utils.js\n\n\n\n\nfunction mapValue(parseFnResult, mapFn) {\n  if (!parseFnResult) {\n    return parseFnResult;\n  }\n\n  return {\n    value: mapFn(parseFnResult.value),\n    rest: parseFnResult.rest,\n  };\n}\n\nfunction parseNumericPattern(pattern, dateString) {\n  const matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  return {\n    value: parseInt(matchResult[0], 10),\n    rest: dateString.slice(matchResult[0].length),\n  };\n}\n\nfunction parseTimezonePattern(pattern, dateString) {\n  const matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  // Input is \'Z\'\n  if (matchResult[0] === "Z") {\n    return {\n      value: 0,\n      rest: dateString.slice(1),\n    };\n  }\n\n  const sign = matchResult[1] === "+" ? 1 : -1;\n  const hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  const minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  const seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n\n  return {\n    value:\n      sign *\n      (hours * millisecondsInHour +\n        minutes * millisecondsInMinute +\n        seconds * millisecondsInSecond),\n    rest: dateString.slice(matchResult[0].length),\n  };\n}\n\nfunction parseAnyDigitsSigned(dateString) {\n  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);\n}\n\nfunction parseNDigits(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigit, dateString);\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigits, dateString);\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigits, dateString);\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigits, dateString);\n    default:\n      return parseNumericPattern(new RegExp("^\\\\d{1," + n + "}"), dateString);\n  }\n}\n\nfunction parseNDigitsSigned(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);\n    default:\n      return parseNumericPattern(new RegExp("^-?\\\\d{1," + n + "}"), dateString);\n  }\n}\n\nfunction dayPeriodEnumToHours(dayPeriod) {\n  switch (dayPeriod) {\n    case "morning":\n      return 4;\n    case "evening":\n      return 17;\n    case "pm":\n    case "noon":\n    case "afternoon":\n      return 12;\n    case "am":\n    case "midnight":\n    case "night":\n    default:\n      return 0;\n  }\n}\n\nfunction normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  const isCommonEra = currentYear > 0;\n  // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n  const absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n\n  let result;\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    const rangeEnd = absCurrentYear + 50;\n    const rangeEndCentury = Math.trunc(rangeEnd / 100) * 100;\n    const isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n\n  return isCommonEra ? result : 1 - result;\n}\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/YearParser.js\n\n\n\n\n// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n// | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n// |----------|-------|----|-------|-------|-------|\n// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\nclass YearParser extends Parser {\n  priority = 130;\n  incompatibleTokens = ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"];\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === "yy",\n    });\n\n    switch (token) {\n      case "y":\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n      case "yo":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: "year",\n          }),\n          valueCallback,\n        );\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value) {\n    const currentYear = date.getFullYear();\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(normalizedTwoDigitYear, 0, 1);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    }\n\n    const year =\n      !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\n\n;// ./node_modules/date-fns/startOfWeek.js\n\n\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nfunction startOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date, options?.in);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_startOfWeek = ((/* unused pure expression or super */ null && (startOfWeek)));\n\n;// ./node_modules/date-fns/getWeekYear.js\n\n\n\n\n\n/**\n * The {@link getWeekYear} function options.\n */\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The local week-numbering year\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nfunction getWeekYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const firstWeekOfNextYear = constructFrom(options?.in || date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n\n  const firstWeekOfThisYear = constructFrom(options?.in || date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n\n  if (+_date >= +startOfNextYear) {\n    return year + 1;\n  } else if (+_date >= +startOfThisYear) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_getWeekYear = ((/* unused pure expression or super */ null && (getWeekYear)));\n\n;// ./node_modules/date-fns/parse/_lib/parsers/LocalWeekYearParser.js\n\n\n\n\n\n\n\n// Local week-numbering year\nclass LocalWeekYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === "YY",\n    });\n\n    switch (token) {\n      case "Y":\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n      case "Yo":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: "year",\n          }),\n          valueCallback,\n        );\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value, options) {\n    const currentYear = getWeekYear(date, options);\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(\n        normalizedTwoDigitYear,\n        0,\n        options.firstWeekContainsDate,\n      );\n      date.setHours(0, 0, 0, 0);\n      return startOfWeek(date, options);\n    }\n\n    const year =\n      !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, options.firstWeekContainsDate);\n    date.setHours(0, 0, 0, 0);\n    return startOfWeek(date, options);\n  }\n\n  incompatibleTokens = [\n    "y",\n    "R",\n    "u",\n    "Q",\n    "q",\n    "M",\n    "L",\n    "I",\n    "d",\n    "D",\n    "i",\n    "t",\n    "T",\n  ];\n}\n\n;// ./node_modules/date-fns/startOfISOWeek.js\n\n\n/**\n * The {@link startOfISOWeek} function options.\n */\n\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nfunction startOfISOWeek(date, options) {\n  return startOfWeek(date, { ...options, weekStartsOn: 1 });\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_startOfISOWeek = ((/* unused pure expression or super */ null && (startOfISOWeek)));\n\n;// ./node_modules/date-fns/parse/_lib/parsers/ISOWeekYearParser.js\n\n\n\n\n\n\n// ISO week-numbering year\nclass ISOWeekYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token) {\n    if (token === "R") {\n      return parseNDigitsSigned(4, dateString);\n    }\n\n    return parseNDigitsSigned(token.length, dateString);\n  }\n\n  set(date, _flags, value) {\n    const firstWeekOfYear = constructFrom(date, 0);\n    firstWeekOfYear.setFullYear(value, 0, 4);\n    firstWeekOfYear.setHours(0, 0, 0, 0);\n    return startOfISOWeek(firstWeekOfYear);\n  }\n\n  incompatibleTokens = [\n    "G",\n    "y",\n    "Y",\n    "u",\n    "Q",\n    "q",\n    "M",\n    "L",\n    "w",\n    "d",\n    "D",\n    "e",\n    "c",\n    "t",\n    "T",\n  ];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/ExtendedYearParser.js\n\n\n\n\nclass ExtendedYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token) {\n    if (token === "u") {\n      return parseNDigitsSigned(4, dateString);\n    }\n\n    return parseNDigitsSigned(token.length, dateString);\n  }\n\n  set(date, _flags, value) {\n    date.setFullYear(value, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = ["G", "y", "Y", "R", "w", "I", "i", "e", "c", "t", "T"];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/QuarterParser.js\n\n\n\n\nclass QuarterParser extends Parser {\n  priority = 120;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case "Q":\n      case "QQ": // 01, 02, 03, 04\n        return parseNDigits(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n      case "Qo":\n        return match.ordinalNumber(dateString, { unit: "quarter" });\n      // Q1, Q2, Q3, Q4\n      case "QQQ":\n        return (\n          match.quarter(dateString, {\n            width: "abbreviated",\n            context: "formatting",\n          }) ||\n          match.quarter(dateString, {\n            width: "narrow",\n            context: "formatting",\n          })\n        );\n\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case "QQQQQ":\n        return match.quarter(dateString, {\n          width: "narrow",\n          context: "formatting",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case "QQQQ":\n      default:\n        return (\n          match.quarter(dateString, {\n            width: "wide",\n            context: "formatting",\n          }) ||\n          match.quarter(dateString, {\n            width: "abbreviated",\n            context: "formatting",\n          }) ||\n          match.quarter(dateString, {\n            width: "narrow",\n            context: "formatting",\n          })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    "Y",\n    "R",\n    "q",\n    "M",\n    "L",\n    "w",\n    "I",\n    "d",\n    "D",\n    "i",\n    "e",\n    "c",\n    "t",\n    "T",\n  ];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/StandAloneQuarterParser.js\n\n\n\n\nclass StandAloneQuarterParser extends Parser {\n  priority = 120;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case "q":\n      case "qq": // 01, 02, 03, 04\n        return parseNDigits(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n      case "qo":\n        return match.ordinalNumber(dateString, { unit: "quarter" });\n      // Q1, Q2, Q3, Q4\n      case "qqq":\n        return (\n          match.quarter(dateString, {\n            width: "abbreviated",\n            context: "standalone",\n          }) ||\n          match.quarter(dateString, {\n            width: "narrow",\n            context: "standalone",\n          })\n        );\n\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case "qqqqq":\n        return match.quarter(dateString, {\n          width: "narrow",\n          context: "standalone",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case "qqqq":\n      default:\n        return (\n          match.quarter(dateString, {\n            width: "wide",\n            context: "standalone",\n          }) ||\n          match.quarter(dateString, {\n            width: "abbreviated",\n            context: "standalone",\n          }) ||\n          match.quarter(dateString, {\n            width: "narrow",\n            context: "standalone",\n          })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    "Y",\n    "R",\n    "Q",\n    "M",\n    "L",\n    "w",\n    "I",\n    "d",\n    "D",\n    "i",\n    "e",\n    "c",\n    "t",\n    "T",\n  ];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/MonthParser.js\n\n\n\n\n\nclass MonthParser extends Parser {\n  incompatibleTokens = [\n    "Y",\n    "R",\n    "q",\n    "Q",\n    "L",\n    "w",\n    "I",\n    "D",\n    "i",\n    "e",\n    "c",\n    "t",\n    "T",\n  ];\n\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case "M":\n        return mapValue(\n          parseNumericPattern(numericPatterns.month, dateString),\n          valueCallback,\n        );\n      // 01, 02, ..., 12\n      case "MM":\n        return mapValue(parseNDigits(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n      case "Mo":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: "month",\n          }),\n          valueCallback,\n        );\n      // Jan, Feb, ..., Dec\n      case "MMM":\n        return (\n          match.month(dateString, {\n            width: "abbreviated",\n            context: "formatting",\n          }) ||\n          match.month(dateString, { width: "narrow", context: "formatting" })\n        );\n\n      // J, F, ..., D\n      case "MMMMM":\n        return match.month(dateString, {\n          width: "narrow",\n          context: "formatting",\n        });\n      // January, February, ..., December\n      case "MMMM":\n      default:\n        return (\n          match.month(dateString, { width: "wide", context: "formatting" }) ||\n          match.month(dateString, {\n            width: "abbreviated",\n            context: "formatting",\n          }) ||\n          match.month(dateString, { width: "narrow", context: "formatting" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/StandAloneMonthParser.js\n\n\n\n\n\nclass StandAloneMonthParser extends Parser {\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case "L":\n        return mapValue(\n          parseNumericPattern(numericPatterns.month, dateString),\n          valueCallback,\n        );\n      // 01, 02, ..., 12\n      case "LL":\n        return mapValue(parseNDigits(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n      case "Lo":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: "month",\n          }),\n          valueCallback,\n        );\n      // Jan, Feb, ..., Dec\n      case "LLL":\n        return (\n          match.month(dateString, {\n            width: "abbreviated",\n            context: "standalone",\n          }) ||\n          match.month(dateString, { width: "narrow", context: "standalone" })\n        );\n\n      // J, F, ..., D\n      case "LLLLL":\n        return match.month(dateString, {\n          width: "narrow",\n          context: "standalone",\n        });\n      // January, February, ..., December\n      case "LLLL":\n      default:\n        return (\n          match.month(dateString, { width: "wide", context: "standalone" }) ||\n          match.month(dateString, {\n            width: "abbreviated",\n            context: "standalone",\n          }) ||\n          match.month(dateString, { width: "narrow", context: "standalone" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    "Y",\n    "R",\n    "q",\n    "Q",\n    "M",\n    "w",\n    "I",\n    "D",\n    "i",\n    "e",\n    "c",\n    "t",\n    "T",\n  ];\n}\n\n;// ./node_modules/date-fns/startOfWeekYear.js\n\n\n\n\n\n/**\n * The {@link startOfWeekYear} function options.\n */\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week-numbering year\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nfunction startOfWeekYear(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const year = getWeekYear(date, options);\n  const firstWeek = constructFrom(options?.in || date, 0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  const _date = startOfWeek(firstWeek, options);\n  return _date;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_startOfWeekYear = ((/* unused pure expression or super */ null && (startOfWeekYear)));\n\n;// ./node_modules/date-fns/getWeek.js\n\n\n\n\n\n/**\n * The {@link getWeek} function options.\n */\n\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\nfunction getWeek(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it\'s different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_getWeek = ((/* unused pure expression or super */ null && (getWeek)));\n\n;// ./node_modules/date-fns/setWeek.js\n\n\n\n/**\n * The {@link setWeek} function options.\n */\n\n/**\n * @name setWeek\n * @category Week Helpers\n * @summary Set the local week to the given date.\n *\n * @description\n * Set the local week to the given date, saving the weekday number.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param week - The week of the new date\n * @param options - An object with options\n *\n * @returns The new date with the local week set\n *\n * @example\n * // Set the 1st week to 2 January 2005 with default options:\n * const result = setWeek(new Date(2005, 0, 2), 1)\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // Set the 1st week to 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January:\n * const result = setWeek(new Date(2005, 0, 2), 1, {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Sun Jan 4 2004 00:00:00\n */\nfunction setWeek(date, week, options) {\n  const date_ = toDate(date, options?.in);\n  const diff = getWeek(date_, options) - week;\n  date_.setDate(date_.getDate() - diff * 7);\n  return toDate(date_, options?.in);\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_setWeek = ((/* unused pure expression or super */ null && (setWeek)));\n\n;// ./node_modules/date-fns/parse/_lib/parsers/LocalWeekParser.js\n\n\n\n\n\n\n\n// Local week of year\nclass LocalWeekParser extends Parser {\n  priority = 100;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case "w":\n        return parseNumericPattern(numericPatterns.week, dateString);\n      case "wo":\n        return match.ordinalNumber(dateString, { unit: "week" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 53;\n  }\n\n  set(date, _flags, value, options) {\n    return startOfWeek(setWeek(date, value, options), options);\n  }\n\n  incompatibleTokens = [\n    "y",\n    "R",\n    "u",\n    "q",\n    "Q",\n    "M",\n    "L",\n    "I",\n    "d",\n    "D",\n    "i",\n    "t",\n    "T",\n  ];\n}\n\n;// ./node_modules/date-fns/getISOWeekYear.js\n\n\n\n\n/**\n * The {@link getISOWeekYear} function options.\n */\n\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year\'s first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n *\n * @returns The ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nfunction getISOWeekYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n\n  const fourthOfJanuaryOfNextYear = constructFrom(_date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n\n  const fourthOfJanuaryOfThisYear = constructFrom(_date, 0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_getISOWeekYear = ((/* unused pure expression or super */ null && (getISOWeekYear)));\n\n;// ./node_modules/date-fns/startOfISOWeekYear.js\n\n\n\n\n/**\n * The {@link startOfISOWeekYear} function options.\n */\n\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year\'s first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week-numbering year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\nfunction startOfISOWeekYear(date, options) {\n  const year = getISOWeekYear(date, options);\n  const fourthOfJanuary = constructFrom(options?.in || date, 0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  return startOfISOWeek(fourthOfJanuary);\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_startOfISOWeekYear = ((/* unused pure expression or super */ null && (startOfISOWeekYear)));\n\n;// ./node_modules/date-fns/getISOWeek.js\n\n\n\n\n\n/**\n * The {@link getISOWeek} function options.\n */\n\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nfunction getISOWeek(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it\'s different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_getISOWeek = ((/* unused pure expression or super */ null && (getISOWeek)));\n\n;// ./node_modules/date-fns/setISOWeek.js\n\n\n\n/**\n * The {@link setISOWeek} function options.\n */\n\n/**\n * @name setISOWeek\n * @category ISO Week Helpers\n * @summary Set the ISO week to the given date.\n *\n * @description\n * Set the ISO week to the given date, saving the weekday number.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The `Date` type of the context function.\n *\n * @param date - The date to be changed\n * @param week - The ISO week of the new date\n * @param options - An object with options\n *\n * @returns The new date with the ISO week set\n *\n * @example\n * // Set the 53rd ISO week to 7 August 2004:\n * const result = setISOWeek(new Date(2004, 7, 7), 53)\n * //=> Sat Jan 01 2005 00:00:00\n */\nfunction setISOWeek(date, week, options) {\n  const _date = toDate(date, options?.in);\n  const diff = getISOWeek(_date, options) - week;\n  _date.setDate(_date.getDate() - diff * 7);\n  return _date;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_setISOWeek = ((/* unused pure expression or super */ null && (setISOWeek)));\n\n;// ./node_modules/date-fns/parse/_lib/parsers/ISOWeekParser.js\n\n\n\n\n\n\n\n// ISO week of year\nclass ISOWeekParser extends Parser {\n  priority = 100;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case "I":\n        return parseNumericPattern(numericPatterns.week, dateString);\n      case "Io":\n        return match.ordinalNumber(dateString, { unit: "week" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 53;\n  }\n\n  set(date, _flags, value) {\n    return startOfISOWeek(setISOWeek(date, value));\n  }\n\n  incompatibleTokens = [\n    "y",\n    "Y",\n    "u",\n    "q",\n    "Q",\n    "M",\n    "L",\n    "w",\n    "d",\n    "D",\n    "e",\n    "c",\n    "t",\n    "T",\n  ];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/DateParser.js\n\n\n\n\n\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst DAYS_IN_MONTH_LEAP_YEAR = [\n  31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,\n];\n\n// Day of the month\nclass DateParser extends Parser {\n  priority = 90;\n  subPriority = 1;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case "d":\n        return parseNumericPattern(numericPatterns.date, dateString);\n      case "do":\n        return match.ordinalNumber(dateString, { unit: "date" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(date, value) {\n    const year = date.getFullYear();\n    const isLeapYear = isLeapYearIndex(year);\n    const month = date.getMonth();\n    if (isLeapYear) {\n      return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];\n    } else {\n      return value >= 1 && value <= DAYS_IN_MONTH[month];\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setDate(value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    "Y",\n    "R",\n    "q",\n    "Q",\n    "w",\n    "I",\n    "D",\n    "i",\n    "e",\n    "c",\n    "t",\n    "T",\n  ];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/DayOfYearParser.js\n\n\n\n\n\nclass DayOfYearParser extends Parser {\n  priority = 90;\n\n  subpriority = 1;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case "D":\n      case "DD":\n        return parseNumericPattern(numericPatterns.dayOfYear, dateString);\n      case "Do":\n        return match.ordinalNumber(dateString, { unit: "date" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(date, value) {\n    const year = date.getFullYear();\n    const isLeapYear = isLeapYearIndex(year);\n    if (isLeapYear) {\n      return value >= 1 && value <= 366;\n    } else {\n      return value >= 1 && value <= 365;\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(0, value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    "Y",\n    "R",\n    "q",\n    "Q",\n    "M",\n    "L",\n    "w",\n    "I",\n    "d",\n    "E",\n    "i",\n    "e",\n    "c",\n    "t",\n    "T",\n  ];\n}\n\n;// ./node_modules/date-fns/addDays.js\n\n\n\n/**\n * The {@link addDays} function options.\n */\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be added.\n * @param options - An object with options\n *\n * @returns The new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nfunction addDays(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);\n\n  // If 0 days, no-op to avoid changing times in the hour before end of DST\n  if (!amount) return _date;\n\n  _date.setDate(_date.getDate() + amount);\n  return _date;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_addDays = ((/* unused pure expression or super */ null && (addDays)));\n\n;// ./node_modules/date-fns/setDay.js\n\n\n\n\n/**\n * The {@link setDay} function options.\n */\n\n/**\n * @name setDay\n * @category Weekday Helpers\n * @summary Set the day of the week to the given date.\n *\n * @description\n * Set the day of the week to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param day - The day of the week of the new date\n * @param options - An object with options.\n *\n * @returns The new date with the day of the week set\n *\n * @example\n * // Set week day to Sunday, with the default weekStartsOn of Sunday:\n * const result = setDay(new Date(2014, 8, 1), 0)\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // Set week day to Sunday, with a weekStartsOn of Monday:\n * const result = setDay(new Date(2014, 8, 1), 0, { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 00:00:00\n */\nfunction setDay(date, day, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const date_ = toDate(date, options?.in);\n  const currentDay = date_.getDay();\n\n  const remainder = day % 7;\n  const dayIndex = (remainder + 7) % 7;\n\n  const delta = 7 - weekStartsOn;\n  const diff =\n    day < 0 || day > 6\n      ? day - ((currentDay + delta) % 7)\n      : ((dayIndex + delta) % 7) - ((currentDay + delta) % 7);\n  return addDays(date_, diff, options);\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_setDay = ((/* unused pure expression or super */ null && (setDay)));\n\n;// ./node_modules/date-fns/parse/_lib/parsers/DayParser.js\n\n\n\n// Day of week\nclass DayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // Tue\n      case "E":\n      case "EE":\n      case "EEE":\n        return (\n          match.day(dateString, {\n            width: "abbreviated",\n            context: "formatting",\n          }) ||\n          match.day(dateString, { width: "short", context: "formatting" }) ||\n          match.day(dateString, { width: "narrow", context: "formatting" })\n        );\n\n      // T\n      case "EEEEE":\n        return match.day(dateString, {\n          width: "narrow",\n          context: "formatting",\n        });\n      // Tu\n      case "EEEEEE":\n        return (\n          match.day(dateString, { width: "short", context: "formatting" }) ||\n          match.day(dateString, { width: "narrow", context: "formatting" })\n        );\n\n      // Tuesday\n      case "EEEE":\n      default:\n        return (\n          match.day(dateString, { width: "wide", context: "formatting" }) ||\n          match.day(dateString, {\n            width: "abbreviated",\n            context: "formatting",\n          }) ||\n          match.day(dateString, { width: "short", context: "formatting" }) ||\n          match.day(dateString, { width: "narrow", context: "formatting" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = ["D", "i", "e", "c", "t", "T"];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/LocalDayParser.js\n\n\n\n\n\n// Local day of week\nclass LocalDayParser extends Parser {\n  priority = 90;\n  parse(dateString, token, match, options) {\n    const valueCallback = (value) => {\n      // We want here floor instead of trunc, so we get -7 for value 0 instead of 0\n      const wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n      return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays;\n    };\n\n    switch (token) {\n      // 3\n      case "e":\n      case "ee": // 03\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n      // 3rd\n      case "eo":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: "day",\n          }),\n          valueCallback,\n        );\n      // Tue\n      case "eee":\n        return (\n          match.day(dateString, {\n            width: "abbreviated",\n            context: "formatting",\n          }) ||\n          match.day(dateString, { width: "short", context: "formatting" }) ||\n          match.day(dateString, { width: "narrow", context: "formatting" })\n        );\n\n      // T\n      case "eeeee":\n        return match.day(dateString, {\n          width: "narrow",\n          context: "formatting",\n        });\n      // Tu\n      case "eeeeee":\n        return (\n          match.day(dateString, { width: "short", context: "formatting" }) ||\n          match.day(dateString, { width: "narrow", context: "formatting" })\n        );\n\n      // Tuesday\n      case "eeee":\n      default:\n        return (\n          match.day(dateString, { width: "wide", context: "formatting" }) ||\n          match.day(dateString, {\n            width: "abbreviated",\n            context: "formatting",\n          }) ||\n          match.day(dateString, { width: "short", context: "formatting" }) ||\n          match.day(dateString, { width: "narrow", context: "formatting" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    "y",\n    "R",\n    "u",\n    "q",\n    "Q",\n    "M",\n    "L",\n    "I",\n    "d",\n    "D",\n    "E",\n    "i",\n    "c",\n    "t",\n    "T",\n  ];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/StandAloneLocalDayParser.js\n\n\n\n\n\n// Stand-alone local day of week\nclass StandAloneLocalDayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match, options) {\n    const valueCallback = (value) => {\n      // We want here floor instead of trunc, so we get -7 for value 0 instead of 0\n      const wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n      return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays;\n    };\n\n    switch (token) {\n      // 3\n      case "c":\n      case "cc": // 03\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n      // 3rd\n      case "co":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: "day",\n          }),\n          valueCallback,\n        );\n      // Tue\n      case "ccc":\n        return (\n          match.day(dateString, {\n            width: "abbreviated",\n            context: "standalone",\n          }) ||\n          match.day(dateString, { width: "short", context: "standalone" }) ||\n          match.day(dateString, { width: "narrow", context: "standalone" })\n        );\n\n      // T\n      case "ccccc":\n        return match.day(dateString, {\n          width: "narrow",\n          context: "standalone",\n        });\n      // Tu\n      case "cccccc":\n        return (\n          match.day(dateString, { width: "short", context: "standalone" }) ||\n          match.day(dateString, { width: "narrow", context: "standalone" })\n        );\n\n      // Tuesday\n      case "cccc":\n      default:\n        return (\n          match.day(dateString, { width: "wide", context: "standalone" }) ||\n          match.day(dateString, {\n            width: "abbreviated",\n            context: "standalone",\n          }) ||\n          match.day(dateString, { width: "short", context: "standalone" }) ||\n          match.day(dateString, { width: "narrow", context: "standalone" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    "y",\n    "R",\n    "u",\n    "q",\n    "Q",\n    "M",\n    "L",\n    "I",\n    "d",\n    "D",\n    "E",\n    "i",\n    "e",\n    "t",\n    "T",\n  ];\n}\n\n;// ./node_modules/date-fns/getISODay.js\n\n\n/**\n * The {@link getISODay} function options.\n */\n\n/**\n * @name getISODay\n * @category Weekday Helpers\n * @summary Get the day of the ISO week of the given date.\n *\n * @description\n * Get the day of the ISO week of the given date,\n * which is 7 for Sunday, 1 for Monday etc.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The day of ISO week\n *\n * @example\n * // Which day of the ISO week is 26 February 2012?\n * const result = getISODay(new Date(2012, 1, 26))\n * //=> 7\n */\nfunction getISODay(date, options) {\n  const day = toDate(date, options?.in).getDay();\n  return day === 0 ? 7 : day;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_getISODay = ((/* unused pure expression or super */ null && (getISODay)));\n\n;// ./node_modules/date-fns/setISODay.js\n\n\n\n\n/**\n * The {@link setISODay} function options.\n */\n\n/**\n * @name setISODay\n * @category Weekday Helpers\n * @summary Set the day of the ISO week to the given date.\n *\n * @description\n * Set the day of the ISO week to the given date.\n * ISO week starts with Monday.\n * 7 is the index of Sunday, 1 is the index of Monday, etc.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param day - The day of the ISO week of the new date\n * @param options - An object with options\n *\n * @returns The new date with the day of the ISO week set\n *\n * @example\n * // Set Sunday to 1 September 2014:\n * const result = setISODay(new Date(2014, 8, 1), 7)\n * //=> Sun Sep 07 2014 00:00:00\n */\nfunction setISODay(date, day, options) {\n  const date_ = toDate(date, options?.in);\n  const currentDay = getISODay(date_, options);\n  const diff = day - currentDay;\n  return addDays(date_, diff, options);\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_setISODay = ((/* unused pure expression or super */ null && (setISODay)));\n\n;// ./node_modules/date-fns/parse/_lib/parsers/ISODayParser.js\n\n\n\n\n\n// ISO day of week\nclass ISODayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => {\n      if (value === 0) {\n        return 7;\n      }\n      return value;\n    };\n\n    switch (token) {\n      // 2\n      case "i":\n      case "ii": // 02\n        return parseNDigits(token.length, dateString);\n      // 2nd\n      case "io":\n        return match.ordinalNumber(dateString, { unit: "day" });\n      // Tue\n      case "iii":\n        return mapValue(\n          match.day(dateString, {\n            width: "abbreviated",\n            context: "formatting",\n          }) ||\n            match.day(dateString, {\n              width: "short",\n              context: "formatting",\n            }) ||\n            match.day(dateString, {\n              width: "narrow",\n              context: "formatting",\n            }),\n          valueCallback,\n        );\n      // T\n      case "iiiii":\n        return mapValue(\n          match.day(dateString, {\n            width: "narrow",\n            context: "formatting",\n          }),\n          valueCallback,\n        );\n      // Tu\n      case "iiiiii":\n        return mapValue(\n          match.day(dateString, {\n            width: "short",\n            context: "formatting",\n          }) ||\n            match.day(dateString, {\n              width: "narrow",\n              context: "formatting",\n            }),\n          valueCallback,\n        );\n      // Tuesday\n      case "iiii":\n      default:\n        return mapValue(\n          match.day(dateString, {\n            width: "wide",\n            context: "formatting",\n          }) ||\n            match.day(dateString, {\n              width: "abbreviated",\n              context: "formatting",\n            }) ||\n            match.day(dateString, {\n              width: "short",\n              context: "formatting",\n            }) ||\n            match.day(dateString, {\n              width: "narrow",\n              context: "formatting",\n            }),\n          valueCallback,\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 7;\n  }\n\n  set(date, _flags, value) {\n    date = setISODay(date, value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    "y",\n    "Y",\n    "u",\n    "q",\n    "Q",\n    "M",\n    "L",\n    "w",\n    "d",\n    "D",\n    "E",\n    "e",\n    "c",\n    "t",\n    "T",\n  ];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/AMPMParser.js\n\n\n\n\nclass AMPMParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case "a":\n      case "aa":\n      case "aaa":\n        return (\n          match.dayPeriod(dateString, {\n            width: "abbreviated",\n            context: "formatting",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: "narrow",\n            context: "formatting",\n          })\n        );\n\n      case "aaaaa":\n        return match.dayPeriod(dateString, {\n          width: "narrow",\n          context: "formatting",\n        });\n      case "aaaa":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: "wide",\n            context: "formatting",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: "abbreviated",\n            context: "formatting",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: "narrow",\n            context: "formatting",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = ["b", "B", "H", "k", "t", "T"];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/AMPMMidnightParser.js\n\n\n\n\nclass AMPMMidnightParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case "b":\n      case "bb":\n      case "bbb":\n        return (\n          match.dayPeriod(dateString, {\n            width: "abbreviated",\n            context: "formatting",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: "narrow",\n            context: "formatting",\n          })\n        );\n\n      case "bbbbb":\n        return match.dayPeriod(dateString, {\n          width: "narrow",\n          context: "formatting",\n        });\n      case "bbbb":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: "wide",\n            context: "formatting",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: "abbreviated",\n            context: "formatting",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: "narrow",\n            context: "formatting",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = ["a", "B", "H", "k", "t", "T"];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/DayPeriodParser.js\n\n\n\n\n// in the morning, in the afternoon, in the evening, at night\nclass DayPeriodParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case "B":\n      case "BB":\n      case "BBB":\n        return (\n          match.dayPeriod(dateString, {\n            width: "abbreviated",\n            context: "formatting",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: "narrow",\n            context: "formatting",\n          })\n        );\n\n      case "BBBBB":\n        return match.dayPeriod(dateString, {\n          width: "narrow",\n          context: "formatting",\n        });\n      case "BBBB":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: "wide",\n            context: "formatting",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: "abbreviated",\n            context: "formatting",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: "narrow",\n            context: "formatting",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = ["a", "b", "t", "T"];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/Hour1to12Parser.js\n\n\n\n\n\nclass Hour1to12Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case "h":\n        return parseNumericPattern(numericPatterns.hour12h, dateString);\n      case "ho":\n        return match.ordinalNumber(dateString, { unit: "hour" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 12;\n  }\n\n  set(date, _flags, value) {\n    const isPM = date.getHours() >= 12;\n    if (isPM && value < 12) {\n      date.setHours(value + 12, 0, 0, 0);\n    } else if (!isPM && value === 12) {\n      date.setHours(0, 0, 0, 0);\n    } else {\n      date.setHours(value, 0, 0, 0);\n    }\n    return date;\n  }\n\n  incompatibleTokens = ["H", "K", "k", "t", "T"];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/Hour0to23Parser.js\n\n\n\n\n\nclass Hour0to23Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case "H":\n        return parseNumericPattern(numericPatterns.hour23h, dateString);\n      case "Ho":\n        return match.ordinalNumber(dateString, { unit: "hour" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 23;\n  }\n\n  set(date, _flags, value) {\n    date.setHours(value, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = ["a", "b", "h", "K", "k", "t", "T"];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/Hour0To11Parser.js\n\n\n\n\n\nclass Hour0To11Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case "K":\n        return parseNumericPattern(numericPatterns.hour11h, dateString);\n      case "Ko":\n        return match.ordinalNumber(dateString, { unit: "hour" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    const isPM = date.getHours() >= 12;\n    if (isPM && value < 12) {\n      date.setHours(value + 12, 0, 0, 0);\n    } else {\n      date.setHours(value, 0, 0, 0);\n    }\n    return date;\n  }\n\n  incompatibleTokens = ["h", "H", "k", "t", "T"];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/Hour1To24Parser.js\n\n\n\n\n\nclass Hour1To24Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case "k":\n        return parseNumericPattern(numericPatterns.hour24h, dateString);\n      case "ko":\n        return match.ordinalNumber(dateString, { unit: "hour" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 24;\n  }\n\n  set(date, _flags, value) {\n    const hours = value <= 24 ? value % 24 : value;\n    date.setHours(hours, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = ["a", "b", "h", "H", "K", "t", "T"];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/MinuteParser.js\n\n\n\n\n\nclass MinuteParser extends Parser {\n  priority = 60;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case "m":\n        return parseNumericPattern(numericPatterns.minute, dateString);\n      case "mo":\n        return match.ordinalNumber(dateString, { unit: "minute" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 59;\n  }\n\n  set(date, _flags, value) {\n    date.setMinutes(value, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = ["t", "T"];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/SecondParser.js\n\n\n\n\n\nclass SecondParser extends Parser {\n  priority = 50;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case "s":\n        return parseNumericPattern(numericPatterns.second, dateString);\n      case "so":\n        return match.ordinalNumber(dateString, { unit: "second" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 59;\n  }\n\n  set(date, _flags, value) {\n    date.setSeconds(value, 0);\n    return date;\n  }\n\n  incompatibleTokens = ["t", "T"];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/FractionOfSecondParser.js\n\n\n\n\nclass FractionOfSecondParser extends Parser {\n  priority = 30;\n\n  parse(dateString, token) {\n    const valueCallback = (value) =>\n      Math.trunc(value * Math.pow(10, -token.length + 3));\n    return mapValue(parseNDigits(token.length, dateString), valueCallback);\n  }\n\n  set(date, _flags, value) {\n    date.setMilliseconds(value);\n    return date;\n  }\n\n  incompatibleTokens = ["t", "T"];\n}\n\n;// ./node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js\n\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for \'Europe/Prague\' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nfunction getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/ISOTimezoneWithZParser.js\n\n\n\n\n\n\n\n// Timezone (ISO-8601. +00:00 is `\'Z\'`)\nclass ISOTimezoneWithZParser extends Parser {\n  priority = 10;\n\n  parse(dateString, token) {\n    switch (token) {\n      case "X":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalMinutes,\n          dateString,\n        );\n      case "XX":\n        return parseTimezonePattern(timezonePatterns.basic, dateString);\n      case "XXXX":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalSeconds,\n          dateString,\n        );\n      case "XXXXX":\n        return parseTimezonePattern(\n          timezonePatterns.extendedOptionalSeconds,\n          dateString,\n        );\n      case "XXX":\n      default:\n        return parseTimezonePattern(timezonePatterns.extended, dateString);\n    }\n  }\n\n  set(date, flags, value) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(\n      date,\n      date.getTime() - getTimezoneOffsetInMilliseconds(date) - value,\n    );\n  }\n\n  incompatibleTokens = ["t", "T", "x"];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/ISOTimezoneParser.js\n\n\n\n\n\n\n\n// Timezone (ISO-8601)\nclass ISOTimezoneParser extends Parser {\n  priority = 10;\n\n  parse(dateString, token) {\n    switch (token) {\n      case "x":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalMinutes,\n          dateString,\n        );\n      case "xx":\n        return parseTimezonePattern(timezonePatterns.basic, dateString);\n      case "xxxx":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalSeconds,\n          dateString,\n        );\n      case "xxxxx":\n        return parseTimezonePattern(\n          timezonePatterns.extendedOptionalSeconds,\n          dateString,\n        );\n      case "xxx":\n      default:\n        return parseTimezonePattern(timezonePatterns.extended, dateString);\n    }\n  }\n\n  set(date, flags, value) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(\n      date,\n      date.getTime() - getTimezoneOffsetInMilliseconds(date) - value,\n    );\n  }\n\n  incompatibleTokens = ["t", "T", "X"];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/TimestampSecondsParser.js\n\n\n\n\n\nclass TimestampSecondsParser extends Parser {\n  priority = 40;\n\n  parse(dateString) {\n    return parseAnyDigitsSigned(dateString);\n  }\n\n  set(date, _flags, value) {\n    return [constructFrom(date, value * 1000), { timestampIsSet: true }];\n  }\n\n  incompatibleTokens = "*";\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/TimestampMillisecondsParser.js\n\n\n\n\n\nclass TimestampMillisecondsParser extends Parser {\n  priority = 20;\n\n  parse(dateString) {\n    return parseAnyDigitsSigned(dateString);\n  }\n\n  set(date, _flags, value) {\n    return [constructFrom(date, value), { timestampIsSet: true }];\n  }\n\n  incompatibleTokens = "*";\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |\n * |  p  |                                |  P  |                                |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n */\nconst parsers = {\n  G: new EraParser(),\n  y: new YearParser(),\n  Y: new LocalWeekYearParser(),\n  R: new ISOWeekYearParser(),\n  u: new ExtendedYearParser(),\n  Q: new QuarterParser(),\n  q: new StandAloneQuarterParser(),\n  M: new MonthParser(),\n  L: new StandAloneMonthParser(),\n  w: new LocalWeekParser(),\n  I: new ISOWeekParser(),\n  d: new DateParser(),\n  D: new DayOfYearParser(),\n  E: new DayParser(),\n  e: new LocalDayParser(),\n  c: new StandAloneLocalDayParser(),\n  i: new ISODayParser(),\n  a: new AMPMParser(),\n  b: new AMPMMidnightParser(),\n  B: new DayPeriodParser(),\n  h: new Hour1to12Parser(),\n  H: new Hour0to23Parser(),\n  K: new Hour0To11Parser(),\n  k: new Hour1To24Parser(),\n  m: new MinuteParser(),\n  s: new SecondParser(),\n  S: new FractionOfSecondParser(),\n  X: new ISOTimezoneWithZParser(),\n  x: new ISOTimezoneParser(),\n  t: new TimestampSecondsParser(),\n  T: new TimestampMillisecondsParser(),\n};\n\n;// ./node_modules/date-fns/parse.js\n\n\n\n\n\n\n\n\n\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\n\n\n/**\n * The {@link parse} function options.\n */\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - \'\' matches two quote characters in a row\n// - \'(\'\'|[^\'])+(\'|$) matches anything surrounded by two quote characters (\'),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|\'\'|\'(\'\'|[^\'])+(\'|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|\'\'|\'(\'\'|[^\'])+(\'|$)|./g;\n\nconst escapedStringRegExp = /^\'([^]*?)\'?$/;\nconst doubleQuoteRegExp = /\'\'/g;\n\nconst notWhitespaceRegExp = /\\S/;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\n/**\n * @name parse\n * @category Common Helpers\n * @summary Parse the date.\n *\n * @description\n * Return the date parsed from string using the given format string.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters in the format string wrapped between two single quotes characters (\') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a \'real\' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Not all tokens are compatible. Combinations that don\'t make sense or could lead to bugs are prohibited\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n *\n * ```javascript\n * parse(\'23 AM\', \'HH a\', new Date())\n * //=> RangeError: The format string mustn\'t contain `HH` and `a` at the same time\n * ```\n *\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 001, ..., 999                |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n * |                                 |     | PP      | May 29, 1453                      |       |\n * |                                 |     | PPP     | May 29th, 1453                    |       |\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n * |                                 |     | pp      | 12:00:00 AM                       |       |\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n * Notes:\n * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as "stand-alone" units, but are different in some languages.\n *    "Formatting" units are declined according to the rules of the language\n *    in the context of a date. "Stand-alone" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), \'do LLLL\', {locale: cs}) //=> \'6. listopad\'`\n *\n *    `format(new Date(2017, 10, 6), \'do MMMM\', {locale: cs}) //=> \'6. listopadu\'`\n *\n *    `parse` will try to match both formatting and stand-alone units interchangeably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\n *      These variations are marked with "2" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\n *\n *    `parse(\'50\', \'yy\', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\n *\n *    `parse(\'75\', \'yy\', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\n *\n *    while `uu` will just assign the year as is:\n *\n *    `parse(\'50\', \'uu\', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\n *\n *    `parse(\'75\', \'uu\', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear](https://date-fns.org/docs/setISOWeekYear)\n *    and [setWeekYear](https://date-fns.org/docs/setWeekYear)).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 7. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n *    on the given locale.\n *\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\n *    using `en-US` locale: `p` => `hh:mm a`\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n *    using `pt-BR` locale: `p` => `HH:mm`\n *\n * Values will be assigned to the date in the descending order of its unit\'s priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are parsed (e.g. when parsing string \'January 1st\' without a year),\n * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.\n *\n * `referenceDate` must be passed for correct work of the function.\n * If you\'re not sure which `referenceDate` to supply, create a new instance of Date:\n * `parse(\'02/11/2014\', \'MM/dd/yyyy\', new Date())`\n * In this case parsing will be done in the context of the current date.\n * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,\n * then `Invalid Date` will be returned.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\n *\n * If parsing failed, `Invalid Date` will be returned.\n * Invalid Date is a Date, whose time value is NaN.\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param dateStr - The string to parse\n * @param formatStr - The string of tokens\n * @param referenceDate - defines values missing from the parsed dateString\n * @param options - An object with options.\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @returns The parsed date\n *\n * @throws `options.locale` must contain `match` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Parse 11 February 2014 from middle-endian format:\n * var result = parse(\'02/11/2014\', \'MM/dd/yyyy\', new Date())\n * //=> Tue Feb 11 2014 00:00:00\n *\n * @example\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from \'date-fns/locale/eo\'\n * var result = parse(\'28-a de februaro\', "do \'de\' MMMM", new Date(2010, 0, 1), {\n *   locale: eo\n * })\n * //=> Sun Feb 28 2010 00:00:00\n */\nfunction parse(dateStr, formatStr, referenceDate, options) {\n  const invalidDate = () => constructFrom(options?.in || referenceDate, NaN);\n  const defaultOptions = getDefaultOptions_getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? enUS;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  if (!formatStr)\n    return dateStr ? invalidDate() : toDate(referenceDate, options?.in);\n\n  const subFnOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  // If timezone isn\'t specified, it will try to use the context or\n  // the reference date and fallback to the system time zone.\n  const setters = [new DateTimezoneSetter(options?.in, referenceDate)];\n\n  const tokens = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter in longFormatters) {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join("")\n    .match(formattingTokensRegExp);\n\n  const usedTokens = [];\n\n  for (let token of tokens) {\n    if (\n      !options?.useAdditionalWeekYearTokens &&\n      isProtectedWeekYearToken(token)\n    ) {\n      warnOrThrowProtectedError(token, formatStr, dateStr);\n    }\n    if (\n      !options?.useAdditionalDayOfYearTokens &&\n      isProtectedDayOfYearToken(token)\n    ) {\n      warnOrThrowProtectedError(token, formatStr, dateStr);\n    }\n\n    const firstCharacter = token[0];\n    const parser = parsers[firstCharacter];\n    if (parser) {\n      const { incompatibleTokens } = parser;\n      if (Array.isArray(incompatibleTokens)) {\n        const incompatibleToken = usedTokens.find(\n          (usedToken) =>\n            incompatibleTokens.includes(usedToken.token) ||\n            usedToken.token === firstCharacter,\n        );\n        if (incompatibleToken) {\n          throw new RangeError(\n            `The format string mustn\'t contain \\`${incompatibleToken.fullToken}\\` and \\`${token}\\` at the same time`,\n          );\n        }\n      } else if (parser.incompatibleTokens === "*" && usedTokens.length > 0) {\n        throw new RangeError(\n          `The format string mustn\'t contain \\`${token}\\` and any other token at the same time`,\n        );\n      }\n\n      usedTokens.push({ token: firstCharacter, fullToken: token });\n\n      const parseResult = parser.run(\n        dateStr,\n        token,\n        locale.match,\n        subFnOptions,\n      );\n\n      if (!parseResult) {\n        return invalidDate();\n      }\n\n      setters.push(parseResult.setter);\n\n      dateStr = parseResult.rest;\n    } else {\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          "Format string contains an unescaped latin alphabet character `" +\n            firstCharacter +\n            "`",\n        );\n      }\n\n      // Replace two single quote characters with one single quote character\n      if (token === "\'\'") {\n        token = "\'";\n      } else if (firstCharacter === "\'") {\n        token = cleanEscapedString(token);\n      }\n\n      // Cut token from string, or, if string doesn\'t match the token, return Invalid Date\n      if (dateStr.indexOf(token) === 0) {\n        dateStr = dateStr.slice(token.length);\n      } else {\n        return invalidDate();\n      }\n    }\n  }\n\n  // Check if the remaining input contains something other than whitespace\n  if (dateStr.length > 0 && notWhitespaceRegExp.test(dateStr)) {\n    return invalidDate();\n  }\n\n  const uniquePrioritySetters = setters\n    .map((setter) => setter.priority)\n    .sort((a, b) => b - a)\n    .filter((priority, index, array) => array.indexOf(priority) === index)\n    .map((priority) =>\n      setters\n        .filter((setter) => setter.priority === priority)\n        .sort((a, b) => b.subPriority - a.subPriority),\n    )\n    .map((setterArray) => setterArray[0]);\n\n  let date = toDate(referenceDate, options?.in);\n\n  if (isNaN(+date)) return invalidDate();\n\n  const flags = {};\n  for (const setter of uniquePrioritySetters) {\n    if (!setter.validate(date, subFnOptions)) {\n      return invalidDate();\n    }\n\n    const result = setter.set(date, flags, subFnOptions);\n    // Result is tuple (date, flags)\n    if (Array.isArray(result)) {\n      date = result[0];\n      Object.assign(flags, result[1]);\n      // Result is date\n    } else {\n      date = result;\n    }\n  }\n\n  return date;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "\'");\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_parse = ((/* unused pure expression or super */ null && (parse)));\n\n;// ./node_modules/date-fns/_lib/normalizeDates.js\n\n\nfunction normalizeDates(context, ...dates) {\n  const normalize = constructFrom.bind(\n    null,\n    context || dates.find((date) => typeof date === "object"),\n  );\n  return dates.map(normalize);\n}\n\n;// ./node_modules/date-fns/startOfDay.js\n\n\n/**\n * The {@link startOfDay} function options.\n */\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nfunction startOfDay(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_startOfDay = ((/* unused pure expression or super */ null && (startOfDay)));\n\n;// ./node_modules/date-fns/differenceInCalendarDays.js\n\n\n\n\n\n/**\n * The {@link differenceInCalendarDays} function options.\n */\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - The options object\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nfunction differenceInCalendarDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const laterStartOfDay = startOfDay(laterDate_);\n  const earlierStartOfDay = startOfDay(earlierDate_);\n\n  const laterTimestamp =\n    +laterStartOfDay - getTimezoneOffsetInMilliseconds(laterStartOfDay);\n  const earlierTimestamp =\n    +earlierStartOfDay - getTimezoneOffsetInMilliseconds(earlierStartOfDay);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it\'s different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_differenceInCalendarDays = ((/* unused pure expression or super */ null && (differenceInCalendarDays)));\n\n;// ./node_modules/date-fns/differenceInDays.js\n\n\n\n/**\n * The {@link differenceInDays} function options.\n */\n\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between two dates. Fractional days are\n * truncated towards zero.\n *\n * One "full day" is the distance between a local time in one day to the same\n * local time on the next or previous day. A full day can sometimes be less than\n * or more than 24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 24-hour periods, use this instead:\n * `Math.trunc(differenceInHours(dateLeft, dateRight)/24)|0`.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of full days according to the local timezone\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n *\n * @example\n * // How many full days are between\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 92 days, even in\n * // time zones where DST starts and the\n * // period has only 92*24-1 hours.\n * const result = differenceInDays(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 1)\n * )\n * //=> 92\n */\nfunction differenceInDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const sign = compareLocalAsc(laterDate_, earlierDate_);\n  const difference = Math.abs(\n    differenceInCalendarDays(laterDate_, earlierDate_),\n  );\n\n  laterDate_.setDate(laterDate_.getDate() - sign * difference);\n\n  // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n  const isLastDayNotFull = Number(\n    compareLocalAsc(laterDate_, earlierDate_) === -sign,\n  );\n\n  const result = sign * (difference - isLastDayNotFull);\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}\n\n// Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\nfunction compareLocalAsc(laterDate, earlierDate) {\n  const diff =\n    laterDate.getFullYear() - earlierDate.getFullYear() ||\n    laterDate.getMonth() - earlierDate.getMonth() ||\n    laterDate.getDate() - earlierDate.getDate() ||\n    laterDate.getHours() - earlierDate.getHours() ||\n    laterDate.getMinutes() - earlierDate.getMinutes() ||\n    laterDate.getSeconds() - earlierDate.getSeconds() ||\n    laterDate.getMilliseconds() - earlierDate.getMilliseconds();\n\n  if (diff < 0) return -1;\n  if (diff > 0) return 1;\n\n  // Return 0 if diff is 0; return NaN if diff is NaN\n  return diff;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_differenceInDays = ((/* unused pure expression or super */ null && (differenceInDays)));\n\n;// ./node_modules/date-fns/startOfYear.js\n\n\n/**\n * The {@link startOfYear} function options.\n */\n\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nfunction startOfYear(date, options) {\n  const date_ = toDate(date, options?.in);\n  date_.setFullYear(date_.getFullYear(), 0, 1);\n  date_.setHours(0, 0, 0, 0);\n  return date_;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_startOfYear = ((/* unused pure expression or super */ null && (startOfYear)));\n\n;// ./node_modules/date-fns/getDayOfYear.js\n\n\n\n\n/**\n * The {@link getDayOfYear} function options.\n */\n\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nfunction getDayOfYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = differenceInCalendarDays(_date, startOfYear(_date));\n  const dayOfYear = diff + 1;\n  return dayOfYear;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_getDayOfYear = ((/* unused pure expression or super */ null && (getDayOfYear)));\n\n;// ./node_modules/date-fns/_lib/addLeadingZeros.js\nfunction addLeadingZeros(number, targetLength) {\n  const sign = number < 0 ? "-" : "";\n  const output = Math.abs(number).toString().padStart(targetLength, "0");\n  return sign + output;\n}\n\n;// ./node_modules/date-fns/_lib/format/lightFormatters.js\n\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nconst lightFormatters = {\n  // Year\n  y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    const signedYear = date.getFullYear();\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);\n  },\n\n  // Month\n  M(date, token) {\n    const month = date.getMonth();\n    return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n\n  // Day of the month\n  d(date, token) {\n    return addLeadingZeros(date.getDate(), token.length);\n  },\n\n  // AM or PM\n  a(date, token) {\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? "pm" : "am";\n\n    switch (token) {\n      case "a":\n      case "aa":\n        return dayPeriodEnumValue.toUpperCase();\n      case "aaa":\n        return dayPeriodEnumValue;\n      case "aaaaa":\n        return dayPeriodEnumValue[0];\n      case "aaaa":\n      default:\n        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";\n    }\n  },\n\n  // Hour [1-12]\n  h(date, token) {\n    return addLeadingZeros(date.getHours() % 12 || 12, token.length);\n  },\n\n  // Hour [0-23]\n  H(date, token) {\n    return addLeadingZeros(date.getHours(), token.length);\n  },\n\n  // Minute\n  m(date, token) {\n    return addLeadingZeros(date.getMinutes(), token.length);\n  },\n\n  // Second\n  s(date, token) {\n    return addLeadingZeros(date.getSeconds(), token.length);\n  },\n\n  // Fraction of second\n  S(date, token) {\n    const numberOfDigits = token.length;\n    const milliseconds = date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, numberOfDigits - 3),\n    );\n    return addLeadingZeros(fractionalSeconds, token.length);\n  },\n};\n\n;// ./node_modules/date-fns/_lib/format/formatters.js\n\n\n\n\n\n\n\n\n\nconst dayPeriodEnum = {\n  am: "am",\n  pm: "pm",\n  midnight: "midnight",\n  noon: "noon",\n  morning: "morning",\n  afternoon: "afternoon",\n  evening: "evening",\n  night: "night",\n};\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nconst formatters = {\n  // Era\n  G: function (date, token, localize) {\n    const era = date.getFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case "G":\n      case "GG":\n      case "GGG":\n        return localize.era(era, { width: "abbreviated" });\n      // A, B\n      case "GGGGG":\n        return localize.era(era, { width: "narrow" });\n      // Anno Domini, Before Christ\n      case "GGGG":\n      default:\n        return localize.era(era, { width: "wide" });\n    }\n  },\n\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === "yo") {\n      const signedYear = date.getFullYear();\n      // Returns 1 for 1 BC (which is year 0 in JavaScript)\n      const year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, { unit: "year" });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    const signedWeekYear = getWeekYear(date, options);\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\n\n    // Two digit year\n    if (token === "YY") {\n      const twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    }\n\n    // Ordinal number\n    if (token === "Yo") {\n      return localize.ordinalNumber(weekYear, { unit: "year" });\n    }\n\n    // Padding\n    return addLeadingZeros(weekYear, token.length);\n  },\n\n  // ISO week-numbering year\n  R: function (date, token) {\n    const isoWeekYear = getISOWeekYear(date);\n\n    // Padding\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    const year = date.getFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n\n  // Quarter\n  Q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case "Q":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case "QQ":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case "Qo":\n        return localize.ordinalNumber(quarter, { unit: "quarter" });\n      // Q1, Q2, Q3, Q4\n      case "QQQ":\n        return localize.quarter(quarter, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case "QQQQQ":\n        return localize.quarter(quarter, {\n          width: "narrow",\n          context: "formatting",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case "QQQQ":\n      default:\n        return localize.quarter(quarter, {\n          width: "wide",\n          context: "formatting",\n        });\n    }\n  },\n\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case "q":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case "qq":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case "qo":\n        return localize.ordinalNumber(quarter, { unit: "quarter" });\n      // Q1, Q2, Q3, Q4\n      case "qqq":\n        return localize.quarter(quarter, {\n          width: "abbreviated",\n          context: "standalone",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case "qqqqq":\n        return localize.quarter(quarter, {\n          width: "narrow",\n          context: "standalone",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case "qqqq":\n      default:\n        return localize.quarter(quarter, {\n          width: "wide",\n          context: "standalone",\n        });\n    }\n  },\n\n  // Month\n  M: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      case "M":\n      case "MM":\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n      case "Mo":\n        return localize.ordinalNumber(month + 1, { unit: "month" });\n      // Jan, Feb, ..., Dec\n      case "MMM":\n        return localize.month(month, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      // J, F, ..., D\n      case "MMMMM":\n        return localize.month(month, {\n          width: "narrow",\n          context: "formatting",\n        });\n      // January, February, ..., December\n      case "MMMM":\n      default:\n        return localize.month(month, { width: "wide", context: "formatting" });\n    }\n  },\n\n  // Stand-alone month\n  L: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case "L":\n        return String(month + 1);\n      // 01, 02, ..., 12\n      case "LL":\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n      case "Lo":\n        return localize.ordinalNumber(month + 1, { unit: "month" });\n      // Jan, Feb, ..., Dec\n      case "LLL":\n        return localize.month(month, {\n          width: "abbreviated",\n          context: "standalone",\n        });\n      // J, F, ..., D\n      case "LLLLL":\n        return localize.month(month, {\n          width: "narrow",\n          context: "standalone",\n        });\n      // January, February, ..., December\n      case "LLLL":\n      default:\n        return localize.month(month, { width: "wide", context: "standalone" });\n    }\n  },\n\n  // Local week of year\n  w: function (date, token, localize, options) {\n    const week = getWeek(date, options);\n\n    if (token === "wo") {\n      return localize.ordinalNumber(week, { unit: "week" });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n\n  // ISO week of year\n  I: function (date, token, localize) {\n    const isoWeek = getISOWeek(date);\n\n    if (token === "Io") {\n      return localize.ordinalNumber(isoWeek, { unit: "week" });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === "do") {\n      return localize.ordinalNumber(date.getDate(), { unit: "date" });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n\n  // Day of year\n  D: function (date, token, localize) {\n    const dayOfYear = getDayOfYear(date);\n\n    if (token === "Do") {\n      return localize.ordinalNumber(dayOfYear, { unit: "dayOfYear" });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n\n  // Day of week\n  E: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    switch (token) {\n      // Tue\n      case "E":\n      case "EE":\n      case "EEE":\n        return localize.day(dayOfWeek, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      // T\n      case "EEEEE":\n        return localize.day(dayOfWeek, {\n          width: "narrow",\n          context: "formatting",\n        });\n      // Tu\n      case "EEEEEE":\n        return localize.day(dayOfWeek, {\n          width: "short",\n          context: "formatting",\n        });\n      // Tuesday\n      case "EEEE":\n      default:\n        return localize.day(dayOfWeek, {\n          width: "wide",\n          context: "formatting",\n        });\n    }\n  },\n\n  // Local day of week\n  e: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case "e":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case "ee":\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n      case "eo":\n        return localize.ordinalNumber(localDayOfWeek, { unit: "day" });\n      case "eee":\n        return localize.day(dayOfWeek, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      // T\n      case "eeeee":\n        return localize.day(dayOfWeek, {\n          width: "narrow",\n          context: "formatting",\n        });\n      // Tu\n      case "eeeeee":\n        return localize.day(dayOfWeek, {\n          width: "short",\n          context: "formatting",\n        });\n      // Tuesday\n      case "eeee":\n      default:\n        return localize.day(dayOfWeek, {\n          width: "wide",\n          context: "formatting",\n        });\n    }\n  },\n\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case "c":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case "cc":\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n      case "co":\n        return localize.ordinalNumber(localDayOfWeek, { unit: "day" });\n      case "ccc":\n        return localize.day(dayOfWeek, {\n          width: "abbreviated",\n          context: "standalone",\n        });\n      // T\n      case "ccccc":\n        return localize.day(dayOfWeek, {\n          width: "narrow",\n          context: "standalone",\n        });\n      // Tu\n      case "cccccc":\n        return localize.day(dayOfWeek, {\n          width: "short",\n          context: "standalone",\n        });\n      // Tuesday\n      case "cccc":\n      default:\n        return localize.day(dayOfWeek, {\n          width: "wide",\n          context: "standalone",\n        });\n    }\n  },\n\n  // ISO day of week\n  i: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case "i":\n        return String(isoDayOfWeek);\n      // 02\n      case "ii":\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n      case "io":\n        return localize.ordinalNumber(isoDayOfWeek, { unit: "day" });\n      // Tue\n      case "iii":\n        return localize.day(dayOfWeek, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      // T\n      case "iiiii":\n        return localize.day(dayOfWeek, {\n          width: "narrow",\n          context: "formatting",\n        });\n      // Tu\n      case "iiiiii":\n        return localize.day(dayOfWeek, {\n          width: "short",\n          context: "formatting",\n        });\n      // Tuesday\n      case "iiii":\n      default:\n        return localize.day(dayOfWeek, {\n          width: "wide",\n          context: "formatting",\n        });\n    }\n  },\n\n  // AM or PM\n  a: function (date, token, localize) {\n    const hours = date.getHours();\n    const dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";\n\n    switch (token) {\n      case "a":\n      case "aa":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      case "aaa":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: "abbreviated",\n            context: "formatting",\n          })\n          .toLowerCase();\n      case "aaaaa":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "narrow",\n          context: "formatting",\n        });\n      case "aaaa":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "wide",\n          context: "formatting",\n        });\n    }\n  },\n\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";\n    }\n\n    switch (token) {\n      case "b":\n      case "bb":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      case "bbb":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: "abbreviated",\n            context: "formatting",\n          })\n          .toLowerCase();\n      case "bbbbb":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "narrow",\n          context: "formatting",\n        });\n      case "bbbb":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "wide",\n          context: "formatting",\n        });\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case "B":\n      case "BB":\n      case "BBB":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      case "BBBBB":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "narrow",\n          context: "formatting",\n        });\n      case "BBBB":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "wide",\n          context: "formatting",\n        });\n    }\n  },\n\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === "ho") {\n      let hours = date.getHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, { unit: "hour" });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === "Ho") {\n      return localize.ordinalNumber(date.getHours(), { unit: "hour" });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    const hours = date.getHours() % 12;\n\n    if (token === "Ko") {\n      return localize.ordinalNumber(hours, { unit: "hour" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    let hours = date.getHours();\n    if (hours === 0) hours = 24;\n\n    if (token === "ko") {\n      return localize.ordinalNumber(hours, { unit: "hour" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Minute\n  m: function (date, token, localize) {\n    if (token === "mo") {\n      return localize.ordinalNumber(date.getMinutes(), { unit: "minute" });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n\n  // Second\n  s: function (date, token, localize) {\n    if (token === "so") {\n      return localize.ordinalNumber(date.getSeconds(), { unit: "second" });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is always `\'Z\'`)\n  X: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return "Z";\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case "X":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case "XXXX":\n      case "XX": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case "XXXXX":\n      case "XXX": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, ":");\n    }\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is `\'+00:00\'` or equivalent)\n  x: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case "x":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case "xxxx":\n      case "xx": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case "xxxxx":\n      case "xxx": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, ":");\n    }\n  },\n\n  // Timezone (GMT)\n  O: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case "O":\n      case "OO":\n      case "OOO":\n        return "GMT" + formatTimezoneShort(timezoneOffset, ":");\n      // Long\n      case "OOOO":\n      default:\n        return "GMT" + formatTimezone(timezoneOffset, ":");\n    }\n  },\n\n  // Timezone (specific non-location)\n  z: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case "z":\n      case "zz":\n      case "zzz":\n        return "GMT" + formatTimezoneShort(timezoneOffset, ":");\n      // Long\n      case "zzzz":\n      default:\n        return "GMT" + formatTimezone(timezoneOffset, ":");\n    }\n  },\n\n  // Seconds timestamp\n  t: function (date, token, _localize) {\n    const timestamp = Math.trunc(+date / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n\n  // Milliseconds timestamp\n  T: function (date, token, _localize) {\n    return addLeadingZeros(+date, token.length);\n  },\n};\n\nfunction formatTimezoneShort(offset, delimiter = "") {\n  const sign = offset > 0 ? "-" : "+";\n  const absOffset = Math.abs(offset);\n  const hours = Math.trunc(absOffset / 60);\n  const minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n  if (offset % 60 === 0) {\n    const sign = offset > 0 ? "-" : "+";\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n  return formatTimezone(offset, delimiter);\n}\n\nfunction formatTimezone(offset, delimiter = "") {\n  const sign = offset > 0 ? "-" : "+";\n  const absOffset = Math.abs(offset);\n  const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);\n  const minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n\n;// ./node_modules/date-fns/isDate.js\n/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate(\'2014-02-31\')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nfunction isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === "object" &&\n      Object.prototype.toString.call(value) === "[object Date]")\n  );\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_isDate = ((/* unused pure expression or super */ null && (isDate)));\n\n;// ./node_modules/date-fns/isValid.js\n\n\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertible into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(\'\'))\n * //=> false\n */\nfunction isValid(date) {\n  return !((!isDate(date) && typeof date !== "number") || isNaN(+toDate(date)));\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_isValid = ((/* unused pure expression or super */ null && (isValid)));\n\n;// ./node_modules/date-fns/format.js\n\n\n\n\n\n\n\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\n\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - \'\' matches two quote characters in a row\n// - \'(\'\'|[^\'])+(\'|$) matches anything surrounded by two quote characters (\'),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst format_formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|\'\'|\'(\'\'|[^\'])+(\'|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst format_longFormattingTokensRegExp = /P+p+|P+|p+|\'\'|\'(\'\'|[^\'])+(\'|$)|./g;\n\nconst format_escapedStringRegExp = /^\'([^]*?)\'?$/;\nconst format_doubleQuoteRegExp = /\'\'/g;\nconst format_unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\n\n\n/**\n * The {@link format} function options.\n */\n\n/**\n * @name format\n * @alias formatDate\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (\') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a \'real\' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as "stand-alone" units, but are different in some languages.\n *    "Formatting" units are declined according to the rules of the language\n *    in the context of a date. "Stand-alone" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), \'do LLLL\', {locale: cs}) //=> \'6. listopad\'`\n *\n *    `format(new Date(2017, 10, 6), \'do MMMM\', {locale: cs}) //=> \'6. listopadu\'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with "2" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), \'MMM\') //=> \'Nov\'`\n *\n *    `format(new Date(2017, 10, 6), \'MMMM\') //=> \'November\'`\n *\n *    `format(new Date(2017, 10, 6), \'MMMMM\') //=> \'N\'`\n *\n *    `format(new Date(2017, 10, 6), \'MMMMMM\') //=> \'November\'`\n *\n *    `format(new Date(2017, 10, 6), \'MMMMMMM\') //=> \'November\'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), \'yyyyyyyy\') //=> \'00002017\'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)\n *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @param date - The original date\n * @param format - The string of tokens\n * @param options - An object with options\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), \'MM/dd/yyyy\')\n * //=> \'02/11/2014\'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from \'date-fns/locale/eo\'\n * const result = format(new Date(2014, 6, 2), "do \'de\' MMMM yyyy", {\n *   locale: eoLocale\n * })\n * //=> \'2-a de julio 2014\'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), "h \'o\'\'clock\'")\n * //=> "3 o\'clock"\n */\nfunction format(date, formatStr, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? enUS;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const originalDate = toDate(date, options?.in);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError("Invalid time value");\n  }\n\n  let parts = formatStr\n    .match(format_longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter === "p" || firstCharacter === "P") {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join("")\n    .match(format_formattingTokensRegExp)\n    .map((substring) => {\n      // Replace two single quote characters with one single quote character\n      if (substring === "\'\'") {\n        return { isToken: false, value: "\'" };\n      }\n\n      const firstCharacter = substring[0];\n      if (firstCharacter === "\'") {\n        return { isToken: false, value: format_cleanEscapedString(substring) };\n      }\n\n      if (formatters[firstCharacter]) {\n        return { isToken: true, value: substring };\n      }\n\n      if (firstCharacter.match(format_unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          "Format string contains an unescaped latin alphabet character `" +\n            firstCharacter +\n            "`",\n        );\n      }\n\n      return { isToken: false, value: substring };\n    });\n\n  // invoke localize preprocessor (only for french locales at the moment)\n  if (locale.localize.preprocessor) {\n    parts = locale.localize.preprocessor(originalDate, parts);\n  }\n\n  const formatterOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  return parts\n    .map((part) => {\n      if (!part.isToken) return part.value;\n\n      const token = part.value;\n\n      if (\n        (!options?.useAdditionalWeekYearTokens &&\n          isProtectedWeekYearToken(token)) ||\n        (!options?.useAdditionalDayOfYearTokens &&\n          isProtectedDayOfYearToken(token))\n      ) {\n        warnOrThrowProtectedError(token, formatStr, String(date));\n      }\n\n      const formatter = formatters[token[0]];\n      return formatter(originalDate, token, locale.localize, formatterOptions);\n    })\n    .join("");\n}\n\nfunction format_cleanEscapedString(input) {\n  const matched = input.match(format_escapedStringRegExp);\n\n  if (!matched) {\n    return input;\n  }\n\n  return matched[1].replace(format_doubleQuoteRegExp, "\'");\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_format = ((/* unused pure expression or super */ null && (format)));\n\n;// ./src/js/task.js\nclass Task {\n  constructor(...args) {\n    let [category, title, dueDate, priority] = args;\n    this.category = category;\n    this.title = title;\n    this.dueDate = dueDate;\n    this.priority = priority;\n    this.checklist = false;\n  }\n\n  static fromJSON(obj) {\n    const task = new Task(obj.category, obj.title, obj.dueDate, obj.priority);\n    task.checklist = obj.checklist;\n    return task;\n  }\n\n  getCategory() {\n    return this.category;\n  }\n  setCategory(value) {\n    this.category = value;\n  }\n\n  getTitle() {\n    return this.title;\n  }\n  setTitle(value) {\n    this.title = value;\n  }\n\n  getDate() {\n    return this.dueDate;\n  }\n  setDate(value) {\n    this.dueDate = value;\n  }\n\n  getPriority() {\n    return this.priority;\n  }\n  setPriority(value) {\n    this.priority = value;\n  }\n\n  getChecklist() {\n    return this.checklist;\n  }\n  setChecklist(value) {\n    this.checklist = value;\n  }\n}\n\nfunction loadTasks() {\n  const storedTasksData = localStorage.getItem(\'todoList\');\n\n  if (!storedTasksData) {\n    console.log(\'Todo list data not found in local storage\');\n    return {};\n  }\n\n  const tasksData = JSON.parse(storedTasksData);\n\n  // Converts each object into an instance of Task\n  for (let category in tasksData) {\n    tasksData[category] = tasksData[category].map(Task.fromJSON);\n  }\n\n  return tasksData;\n}\n\nfunction saveTasks(obj) {\n  const tasks = Object.groupBy(obj, ({ category }) => category);\n\n  if (Object.keys(tasks).length > 0) {\n    localStorage.setItem(\'todoList\', JSON.stringify(tasks));\n  } else {\n    localStorage.removeItem(\'todoList\'); // Completely removes storage if there are no tasks\n  }\n}\n\n\n;// ./src/js/todoList.js\n\n\nconst todoList = (function () {\n  function createTask(...args) {\n    const task = new Task(...args);\n    const storedTasks = loadTasks();\n    const category = task.getCategory();\n  \n    if (!storedTasks[category]) {\n      storedTasks[category] = [];\n    }\n  \n    storedTasks[category].push(task);\n    saveTasks(Object.values(storedTasks).flat()); // Flattens nested arrays\n  }\n\n  function editTask(...args) {\n    let [categoryTask, dateTask, category, title, date, priority] = args;\n    const tasks = loadTasks();\n  \n    if (tasks[categoryTask]) {\n      const task = tasks[categoryTask].find(task => task.getDate() === dateTask);\n  \n      if (task) { \n        task.setCategory(category);\n        task.setTitle(title);\n        task.setDate(date);\n        task.setPriority(priority);\n  \n        saveTasks(Object.values(tasks).flat()); // Flattens nested arrays\n      }\n    }\n  }\n\n  function removeTask(categoryTask, dateTask) {\n    const tasks = loadTasks();\n  \n    if (tasks[categoryTask]) {\n      tasks[categoryTask] = tasks[categoryTask].filter(task => task.getDate() !== dateTask);\n  \n      if (tasks[categoryTask].length === 0) {\n        delete tasks[categoryTask];\n      }\n  \n      saveTasks(Object.values(tasks).flat()); // Flattens nested arrays\n    }\n  }\n\n  function sortTask() {\n    const tasks = loadTasks();\n  \n    // Gets all tasks from each category in a single array\n    const allTasks = Object.values(tasks).flat();\n  \n    // Sort by priority (p1 > p2 > p3)\n    const orderedTasks = allTasks.sort((a, b) => {\n      const priorityA = parseInt(a.getPriority().slice(1)); // Extract only the number from "p1", "p2", "p3"\n      const priorityB = parseInt(b.getPriority().slice(1));\n  \n      return priorityA - priorityB; // Ascending order\n    });\n  \n    saveTasks(Object.values(orderedTasks).flat()); // Flattens nested arrays\n  }\n\n  function searchTasks(value) {\n    const searchedValue = [];\n    const tasks = loadTasks();\n  \n    for (let category in tasks) {\n      tasks[category].forEach(task => {\n        if (task.getTitle().toLowerCase().includes(value)) {\n          searchedValue.push(task);\n        }\n      });\n    }\n  \n    return searchedValue;\n  }\n\n  function completeTask(categoryTask, dateTask, checked) {\n    const tasks = loadTasks();\n  \n    if (tasks[categoryTask]) {\n      const task = tasks[categoryTask].find(task => task.getDate() === dateTask);\n  \n      if (task) {\n        task.setChecklist(checked);\n  \n        saveTasks(Object.values(tasks).flat()); // Flattens nested arrays\n      }\n    }\n  }\n\n  return { \n    createTask, \n    editTask, \n    removeTask, \n    sortTask, \n    searchTasks, \n    completeTask \n  }\n})();\n\n/* harmony default export */ const js_todoList = (todoList);\n// EXTERNAL MODULE: ./src/icons/sort.svg\nvar sort = __webpack_require__(5);\nvar sort_default = /*#__PURE__*/__webpack_require__.n(sort);\n;// ./src/js/projects.js\n\n\n\n\n\nfunction random(min, max) {\n  let num = Math.floor(Math.random() * (max - min)) + min;\n  return num\n}\n\nfunction randomColor() {\n  return `rgb(${random(0, 255)}  ${random(0, 255)} ${random(0, 255)})`;\n}\n\nfunction displayContentProject(category) {\n  const tasks = loadTasks();\n  const main = document.querySelector(\'.layout__main\');\n  main.textContent = \'\';\n  main.insertAdjacentHTML( // Add DOM elements to the end of main\n    \'beforeend\',\n    `\n    <div class="main__sort"><i class="icon">${(sort_default())}</i> <p>Sort by priority</p></div>\n    <h3 class="main__title">${category}</h3>\n    `\n  );\n\n  tasks[category].forEach((task) => {\n    js_DOM.updateDom(main, task, 0);\n    js_DOM.removeTaskDom();\n    js_DOM.editTaskDom(category);\n    js_DOM.completeTaskDom(category);\n    js_DOM.sortTaskDom(category);\n    js_DOM.closeDialog();\n  });\n}\n\nfunction handlerClickProject() {\n  const projectContain = document.querySelectorAll(\'.project__content\');\n  const projectsTitle = document.querySelectorAll(\'.project__title\');\n  const options = document.querySelectorAll(\'.aside__user-options > div\');\n  const icons = document.querySelectorAll(\'.icon-tabler\');\n\n  if (projectsTitle) {\n    projectsTitle.forEach((title, index) => {\n      title.addEventListener(\'click\', function () {\n        options.forEach(option => option.classList.remove(\'option__active\'));\n        icons.forEach(icon => icon.classList.remove(\'icon__active\'));\n        projectContain.forEach(icon => icon.classList.remove(\'icon__active\'));\n\n        projectContain[index].classList.add(\'option__active\');\n\n        let category = this.dataset.title;\n        displayContentProject(category)\n      });\n    });\n  }\n}\n\nfunction displayNameProject() {\n  const userProjects = document.querySelector(\'.user-projects__project\');\n  userProjects.textContent = \'\';\n\n  const tasks = loadTasks();\n\n  for (let category in tasks) {\n    if (category) {\n      let color = randomColor();\n      const projectContain = document.createElement(\'div\');\n      projectContain.classList.add(\'project__content\');\n\n      const projectSymbol = document.createElement(\'span\');\n      projectSymbol.classList.add(\'project__symbol\');\n      projectSymbol.textContent = \'#\';\n      projectSymbol.style.setProperty("--symbol-color", color);\n\n      const projectTitle = document.createElement(\'button\');\n      projectTitle.classList.add(\'project__title\');\n      projectTitle.style.setProperty("--after-bg-color", color);\n      projectTitle.dataset.title = category;\n      projectTitle.textContent = category;\n\n      projectContain.appendChild(projectSymbol);\n      projectContain.appendChild(projectTitle);\n      userProjects.appendChild(projectContain);\n    }\n  }\n\n  handlerClickProject();\n}\n\n\n;// ./src/js/next.js\n\n\n\n\n\nfunction displayNext() {\n  const tasks = loadTasks();\n\n  const main = document.querySelector(\'.layout__main\');\n  main.textContent = \'\';\n  main.insertAdjacentHTML( // Add DOM elements to the end of main\n    \'beforeend\',\n    `\n    <div class="main__sort"><i class="icon">${(sort_default())}</i> <p>Sort by priority</p></div>\n    <h3 class="main__title">Next</h3>\n    <h4 class="main___subtitle">My Projects</h4>\n    `\n  );\n\n  for (let category in tasks) {\n    tasks[category].forEach((task) => {\n      js_DOM.updateDom(main, task);\n      js_DOM.removeTaskDom();\n      js_DOM.editTaskDom();\n      js_DOM.completeTaskDom();\n      js_DOM.sortTaskDom();\n    });\n  }\n\n  js_DOM.closeDialog();\n}\n\n\n// EXTERNAL MODULE: ./src/icons/emoticon-sad-outline.svg\nvar emoticon_sad_outline = __webpack_require__(231);\nvar emoticon_sad_outline_default = /*#__PURE__*/__webpack_require__.n(emoticon_sad_outline);\n;// ./src/js/search.js\n\n\n\n\n\n\nfunction displaySearch(searchValue) {\n  const searchedValue = js_todoList.searchTasks(searchValue);\n  const main = document.querySelector(\'.layout__main\');\n  main.textContent = \'\';\n  main.insertAdjacentHTML( // Add DOM elements to the end of main\n    \'beforeend\',\n    `\n    <div class="main__sort"><i class="icon">${(sort_default())}</i> <p>Sort by priority</p></div>\n    <h3 class="main__title">Search result for \'${searchValue}\'</h3>\n    `\n  );\n\n  js_DOM.closeDialog();\n\n  if (!searchValue || (searchedValue.length === 0)) {\n    main.insertAdjacentHTML(\n      \'beforeend\',\n      `<div class="todo__list">\n           <p class="list__notfound">Not Found <i class="icon">${(emoticon_sad_outline_default())}</i></p>\n       </div>\n      `\n    );\n\n    return;\n  }\n\n  searchedValue.forEach((task) => {\n    js_DOM.updateDom(main, task, 0)\n    js_DOM.removeTaskDom();\n    js_DOM.editTaskDom(searchValue);\n    js_DOM.completeTaskDom(searchValue);\n    js_DOM.sortTaskDom(searchValue);\n  });\n}\n\nfunction handlerEnterSearch() {\n  const searchButton = document.querySelector(\'#search\');\n  // Before adding a new listener, delete the previous ones\n  const newSearchButton = searchButton.cloneNode(true);\n  searchButton.replaceWith(newSearchButton); // Delete previous events\n\n  newSearchButton.addEventListener(\'keydown\', (e) => {\n    if (e.key === "Enter") {\n      let searchValue = newSearchButton.value.toLowerCase();\n      displaySearch(searchValue)\n    }\n  });\n}\n\n\n;// ./node_modules/date-fns/constructNow.js\n\n\n/**\n * @name constructNow\n * @category Generic Helpers\n * @summary Constructs a new current date using the passed value constructor.\n * @pure false\n *\n * @description\n * The function constructs a new current date using the constructor from\n * the reference date. It helps to build generic functions that accept date\n * extensions and use the current date.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * @param date - The reference date to take constructor from\n *\n * @returns Current date initialized using the given date constructor\n *\n * @example\n * import { constructNow, isSameDay } from \'date-fns\'\n *\n * function isToday<DateType extends Date>(\n *   date: DateArg<DateType>,\n * ): boolean {\n *   // If we were to use `new Date()` directly, the function would  behave\n *   // differently in different timezones and return false for the same date.\n *   return isSameDay(date, constructNow(date));\n * }\n */\nfunction constructNow(date) {\n  return constructFrom(date, Date.now());\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_constructNow = ((/* unused pure expression or super */ null && (constructNow)));\n\n;// ./node_modules/date-fns/isSameDay.js\n\n\n\n/**\n * The {@link isSameDay} function options.\n */\n\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day (and year and month)?\n *\n * @description\n * Are the given dates in the same day (and year and month)?\n *\n * @param laterDate - The first date to check\n * @param earlierDate - The second date to check\n * @param options - An object with options\n *\n * @returns The dates are in the same day (and year and month)\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * const result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n *\n * @example\n * // Are 4 September and 4 October in the same day?\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2014, 9, 4))\n * //=> false\n *\n * @example\n * // Are 4 September, 2014 and 4 September, 2015 in the same day?\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2015, 8, 4))\n * //=> false\n */\nfunction isSameDay(laterDate, earlierDate, options) {\n  const [dateLeft_, dateRight_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n  return +startOfDay(dateLeft_) === +startOfDay(dateRight_);\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_isSameDay = ((/* unused pure expression or super */ null && (isSameDay)));\n\n;// ./node_modules/date-fns/isToday.js\n\n\n\n\n/**\n * The {@link isToday} function options.\n */\n\n/**\n * @name isToday\n * @category Day Helpers\n * @summary Is the given date today?\n * @pure false\n *\n * @description\n * Is the given date today?\n *\n * @param date - The date to check\n * @param options - An object with options\n *\n * @returns The date is today\n *\n * @example\n * // If today is 6 October 2014, is 6 October 14:00:00 today?\n * const result = isToday(new Date(2014, 9, 6, 14, 0))\n * //=> true\n */\nfunction isToday(date, options) {\n  return isSameDay(\n    constructFrom(options?.in || date, date),\n    constructNow(options?.in || date),\n  );\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_isToday = ((/* unused pure expression or super */ null && (isToday)));\n\n;// ./src/js/today.js\n\n\n\n\n\n\n\nfunction displayToday() {\n  const main = document.querySelector(\'.layout__main\');\n  main.textContent = \'\';\n  main.insertAdjacentHTML(\n    \'beforeend\',\n    `\n    <div class="main__sort"><i class="icon">${(sort_default())}</i> <p>Sort by priority</p></div>\n    <h3 class="main__title">Today</h3>\n    <h4 class="main___subtitle">My Projects</h4>\n    `\n  );\n\n  const tasks = loadTasks();\n\n  for (let category in tasks) {\n    tasks[category].forEach(task => {\n      // Extracts only the date part without the time\n      const date = task.getDate().split(\',\')[0]; // "13/mar/2025"\n\n      if (date) {\n        // Converts the date to the correct format\n        const parsedDate = parse(date.trim(), \'d/MM/y\', new Date());\n      \n      if (isToday(parsedDate)) { // Check if the date is today\n          js_DOM.updateDom(main, task);\n          js_DOM.removeTaskDom();\n          js_DOM.editTaskDom();\n          js_DOM.completeTaskDom();\n          js_DOM.sortTaskDom();\n        }\n      }\n    });\n  }\n\n  js_DOM.closeDialog();\n}\n\n\n\n;// ./src/js/DOM.js\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst DOM = (function () {\n  function openDialog() {\n    dialog.showModal();\n    dialog.classList.add(\'dialog__visible\');\n  }\n\n  function closeDialog() {\n    title.value = \'\';\n    date.value = \'\';\n    priority.value = \'\';\n    category.value = \'\';\n    search.value = \'\';\n    dialog.classList.remove("dialog__visible");\n\n    setTimeout(() => {\n      dialog.close();\n    }, 500);\n\n    document.querySelector(\'.layout__aside\').classList.remove(\'layout__aside-visible\');\n    document.querySelector(\'.icon-tabler-dots-vertical\').style.opacity = 1;\n    document.querySelector(\'.icon-tabler-x\').style.opacity = 0;\n  }\n\n  function updateDom(main, task, hidden = 1) {\n    const todo = document.createElement(\'div\');\n    todo.classList.add(\'todo__list\');\n    todo.dataset.date = task.getDate();\n    todo.dataset.category = task.getCategory();\n\n    const checkbox = document.createElement(\'input\');\n    checkbox.type = \'checkbox\';\n    checkbox.checked = task.getChecklist();\n    checkbox.disabled = task.getChecklist();\n    checkbox.classList.add(\'list__checklist\');\n    checkbox.dataset.category = task.getCategory();\n    checkbox.dataset.date = task.getDate();\n\n    if (task.getPriority()) {\n      let priority = task.getPriority();\n\n      switch (priority) {\n        case \'p1\':\n          checkbox.classList.add(\'checklist__p-1\');\n          break;\n\n        case \'p2\':\n          checkbox.classList.add(\'checklist__p-2\');\n          break;\n\n        case \'p3\':\n          checkbox.classList.add(\'checklist__p-3\');\n          break;\n      }\n    }\n\n    if (checkbox.disabled) {\n      if (hidden) {\n        todo.style.display = \'none\';\n      }\n\n      todo.style.opacity = 0.5;\n    }\n\n    const span = document.createElement(\'span\');\n    span.classList.add(\'list__info\');\n\n    // Extracts only the date part without the time\n    const date = task.getDate().split(\',\')[0]; // "13/mar/2025"\n\n    if (date) {\n      // Converts the date to the correct format\n      const parsedDate = parse(date.trim(), \'d/MM/y\', new Date());\n\n      // Calculate the difference in days\n      const daysPassed = differenceInDays(parsedDate, new Date());\n\n      if (daysPassed < 0) { // check if the date has already passed\n        span.classList.add(\'list__info-expired\');\n        span.textContent = \'Expired\';\n      }\n    }\n\n    todo.appendChild(span);\n    todo.appendChild(checkbox);\n    todo.insertAdjacentHTML(\n      \'beforeend\',\n      `\n        <p class="list__title">${task.getTitle()}</p>\n        <div class="list__date">\n          <p>${task.getDate()}</p>\n          <i class="list__date-icon">${(alarm_default())}</i>\n        </div>\n     `\n    );\n\n    main.appendChild(todo);\n  }\n\n  function reloadDOM(value) {\n    let mainTitle = document.querySelector(\'.main__title\').textContent.toLowerCase();\n\n    if (mainTitle === \'today\') {\n      displayToday();\n    } else if (mainTitle === \'next\') {\n      displayNext();\n    } else if (mainTitle === value) {\n      displayContentProject(value);\n    } else {\n      displaySearch(value);\n    }\n  }\n\n  function displayAddTaskDom() {\n    openDialog();\n\n    const addTaskButton = document.querySelector(\'.form__button\');\n    const buttonText = document.querySelector(\'.button__text\');\n    buttonText.textContent = \'Add Task\';\n\n    addTaskButton.removeEventListener(\'click\', addTaskDom);\n    addTaskButton.addEventListener(\'click\', addTaskDom);\n  }\n\n  function addTaskDom() {\n    let endDate;\n    let category = document.querySelector(\'#category\').value;\n    let title = document.querySelector(\'#title\').value;\n    let date = document.querySelector(\'#date\').value;\n    let priority = document.querySelector(\'#priority\').value;\n\n    console.log(date);\n\n    try {\n      const formattedDated = new Date(date);\n      endDate = format(formattedDated, \'d/MM/y, p\').toLowerCase();\n    } catch (error) {\n      endDate = date;\n    }\n\n    js_todoList.createTask(category, title, endDate, priority);\n    closeDialog();\n    displayNameProject();\n    displayToday();\n  }\n\n  function editTaskDom(value = \'\') {\n    const taskContainer = document.querySelectorAll(\'.todo__list\');\n    taskContainer.forEach(element => {\n      const editButton = document.createElement(\'button\');\n      editButton.classList.add(\'list__edit\');\n      editButton.innerHTML = (square_edit_outline_default());\n      editButton.addEventListener(\'click\', () => {\n        const tasks = loadTasks();\n        let categoryTask = element.dataset.category;\n        let dateTask = element.dataset.date;\n\n        if (tasks[categoryTask]) {\n          const task = tasks[categoryTask].find(task => task.getDate() === dateTask);\n\n          if (task) {\n            openDialog();\n\n            const category = document.querySelector(\'#category\');\n            category.value = task.getCategory();\n\n            const title = document.querySelector(\'#title\');\n            title.value = task.getTitle();\n\n            const date = document.querySelector(\'#date\');\n            \n            // Divide the date into day, month, year and time["13", "03", "2025", "10:00 AM"]\n            const [day, month, year, time, meridian] = task.getDate().replace(\',\', \'\').split(/[\\s/]/);\n            let [hours, minutes] = time.split(\':\');\n\n            // Checks if the time is in 12-hour ("AM" or "PM") and converts it to 24-hour format\n            if (meridian === \'PM\' && hours !== \'12\') hours = String(+hours + 12);\n            if (meridian === \'AM\' && hours === \'12\') hours = \'00\';\n\n            const formattedDate = `${year}-${month.padStart(2, \'0\')}-${day.padStart(2, \'0\')}T${hours.padStart(2, \'0\')}:${minutes}`;\n            date.value = formattedDate;\n\n            const priority = document.querySelector(\'#priority\');\n            priority.value = task.getPriority();\n\n            document.querySelector(\'.button__text\').textContent = \'Ok\';\n\n            const formButton = document.querySelector(\'.form__button\');\n            // Before adding a new listener, delete the previous ones\n            const newButton = formButton.cloneNode(true);\n            formButton.replaceWith(newButton); // Delete previous events\n            newButton.addEventListener(\'click\', () => {\n              let endDate = date.value;\n\n              if (endDate) {\n                const formattedDated = new Date(endDate);\n                endDate = format(formattedDated, \'d/MM/y, p\').toLowerCase();\n              }\n\n              js_todoList.editTask(categoryTask, dateTask, category.value, title.value, endDate, priority.value);\n              closeDialog();\n              displayNameProject();\n              reloadDOM(value);\n            }, { once: true }); // Automatically removes the addEventListener after it runs;\n          }\n        }\n      });\n\n      // Add edit button to the top of the to-do list\n      element.insertAdjacentElement(\'afterbegin\', editButton);\n    });\n  }\n\n  function removeTaskDom() {\n    const taskContainer = document.querySelectorAll(\'.todo__list\');\n    taskContainer.forEach(element => {\n      element.insertAdjacentHTML(\'beforeend\', `<button class="list__remove">${(trash_default())}</button>`);\n      element.lastChild.onclick = () => {\n        element.remove();\n\n        let categoryTask = element.dataset.category;\n        let dateTask = element.dataset.date;\n\n        js_todoList.removeTask(categoryTask, dateTask);\n        displayNameProject();\n      };\n    });\n  }\n\n  function sortTaskDom(value = \'\') {\n    document.querySelector(\'.main__sort\').addEventListener(\'click\', () => {\n      js_todoList.sortTask();\n      reloadDOM(value);\n    });\n  }\n\n  function completeTaskDom(value = \'\') {\n    document.querySelectorAll(\'.list__checklist\').forEach(checkbox => {\n      checkbox.addEventListener(\'change\', function () {\n        let categoryTask = this.dataset.category;\n        let dateTask = this.dataset.date;\n\n        js_todoList.completeTask(categoryTask, dateTask, this.checked);\n        reloadDOM(value);\n      });\n    });\n  }\n\n  return {\n    openDialog,\n    closeDialog,\n    updateDom,\n    reloadDOM,\n    displayAddTaskDom,\n    editTaskDom,\n    removeTaskDom,\n    sortTaskDom,\n    completeTaskDom\n  }\n})();\n\n/* harmony default export */ const js_DOM = (DOM);\n\n;// ./src/js/complete.js\n\n\n\n\n\n\nfunction displayComplete() {\n  const tasks = loadTasks();\n  const main = document.querySelector(\'.layout__main\');\n  main.textContent = \'\';\n  main.insertAdjacentHTML( // Add DOM elements to the end of main\n    \'beforeend\',\n    `\n    <div class="main__sort"><i class="icon">${(sort_default())}</i> <p>Sort by priority</p></div>\n    <h3 class="main__title">Complete</h3>\n    <h4 class="main___subtitle">My Projects</h4>\n    `\n  );\n\n  for (let category in tasks) {\n    tasks[category].forEach(task => {\n      if (task.getChecklist()) {\n        js_DOM.updateDom(main, task, 0);\n        js_DOM.removeTaskDom();\n      }\n    });\n  }\n\n  js_DOM.closeDialog();\n}\n\n\n;// ./src/js/index.js\n\n\n\n\n\n\n\n\n\n\n\n\ndocument.addEventListener(\'DOMContentLoaded\', () => {\n  displayToday();\n  displayNameProject();\n\n  const aside = document.querySelector(\'.layout__aside\');\n  const menuButton = document.querySelector(\'.layout__menu-toggle\');\n  const iconBars = document.querySelector(\'.icon-tabler-dots-vertical\');\n  const iconClose = document.querySelector(\'.icon-tabler-x\');\n  const options = document.querySelectorAll(\'.aside__user-options > div\');\n  const asideButtons = document.querySelectorAll(\'.user-options__text\');\n  const icons = document.querySelectorAll(\'.icon-tabler\');\n  const dialog = document.querySelector(\'#dialog\');\n  const closeDialogBtn = document.querySelector(\'.form__close\');\n  const projectContain = document.querySelectorAll(\'.project__content\');\n\n  menuButton.addEventListener(\'click\', function () {\n    let visible = document.querySelector(".layout__aside-visible");\n\n    if (!visible) {\n      aside.classList.add("layout__aside-visible");\n      iconBars.style.opacity = 0;\n      iconClose.style.opacity = 1;\n    } else {\n      aside.classList.remove("layout__aside-visible");\n      iconBars.style.opacity = 1;\n      iconClose.style.opacity = 0;\n    }\n  });\n\n  options.forEach((option, index) => {\n    option.addEventListener(\'click\', () => {\n      options.forEach(option => option.classList.remove(\'option__active\'));\n      icons.forEach(icon => icon.classList.remove(\'icon__active\'));\n      projectContain.forEach(title => title.classList.remove(\'option__active\'));\n      \n      option.classList.add(\'option__active\');\n      icons[index + 1].classList.add(\'icon__active\');\n    });\n  });\n\n  dialog.addEventListener(\'cancel\', (event) => {\n    event.preventDefault();\n    js_DOM.closeDialog();\n  });\n\n  closeDialogBtn.addEventListener(\'click\', js_DOM.closeDialog);\n\n  asideButtons.forEach((button, index) => {\n    button.addEventListener(\'click\', () => {\n      switch (index) {\n        case 0:\n          js_DOM.displayAddTaskDom();\n          break;\n\n        case 1:\n          handlerEnterSearch();\n          break;\n\n        case 3:\n          displayNext();\n          break;\n\n        case 4:\n          displayComplete();\n          break;\n          \n        default:\n          displayToday();\n      }\n    });\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///602\n')},423:(I,g,n)=>{"use strict";I.exports=n.p+"0bbbf00018c241959227.png"}},__webpack_module_cache__={};function __webpack_require__(I){var g=__webpack_module_cache__[I];if(void 0!==g)return g.exports;var n=__webpack_module_cache__[I]={id:I,exports:{}};return __webpack_modules__[I](n,n.exports,__webpack_require__),n.exports}__webpack_require__.m=__webpack_modules__,__webpack_require__.n=I=>{var g=I&&I.__esModule?()=>I.default:()=>I;return __webpack_require__.d(g,{a:g}),g},__webpack_require__.d=(I,g)=>{for(var n in g)__webpack_require__.o(g,n)&&!__webpack_require__.o(I,n)&&Object.defineProperty(I,n,{enumerable:!0,get:g[n]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(I){if("object"==typeof window)return window}}(),__webpack_require__.o=(I,g)=>Object.prototype.hasOwnProperty.call(I,g),(()=>{var I;__webpack_require__.g.importScripts&&(I=__webpack_require__.g.location+"");var g=__webpack_require__.g.document;if(!I&&g&&(g.currentScript&&"SCRIPT"===g.currentScript.tagName.toUpperCase()&&(I=g.currentScript.src),!I)){var n=g.getElementsByTagName("script");if(n.length)for(var t=n.length-1;t>-1&&(!I||!/^http(s?):/.test(I));)I=n[t--].src}if(!I)throw new Error("Automatic publicPath is not supported in this browser");I=I.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__webpack_require__.p=I})(),__webpack_require__.b=document.baseURI||self.location.href,__webpack_require__.nc=void 0;var __webpack_exports__=__webpack_require__(602)})();